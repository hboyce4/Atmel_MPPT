
MPPT_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000012f6  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  0080010c  0080010c  00001396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030a6  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001109  00000000  00000000  0000473e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ad  00000000  00000000  00005847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  00006ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c08  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000165d  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000097b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__ctors_end>
       4:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
       8:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
       c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      10:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      14:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      18:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      1c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      20:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      24:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      28:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      2c:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_11>
      30:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      34:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      38:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      3c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      40:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      44:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      48:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      4c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      50:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      54:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      58:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      5c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      60:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_24>
      64:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      68:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      6c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      70:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      74:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      78:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	62 61       	ori	r22, 0x12	; 18
      7e:	74 74       	andi	r23, 0x44	; 68
      80:	65 72       	andi	r22, 0x25	; 37
      82:	79 20       	and	r7, r9
      84:	73 65       	ori	r23, 0x53	; 83
      86:	6c 65       	ori	r22, 0x5C	; 92
      88:	63 74       	andi	r22, 0x43	; 67
      8a:	65 64       	ori	r22, 0x45	; 69
      8c:	2e 00       	.word	0x002e	; ????

0000008e <__c.2265>:
      8e:	36 56 20 4c 65 61 64 2d 41 63 69 64 00              6V Lead-Acid.

0000009b <__c.2263>:
      9b:	31 32 56 20 4c 65 61 64 2d 41 63 69 64 00           12V Lead-Acid.

000000a9 <__c.2261>:
      a9:	32 53 20 4c 69 2d 49 6f 6e 20 38 2e 34 56 00        2S Li-Ion 8.4V.

000000b8 <__c.2259>:
      b8:	33 53 20 4c 69 2d 49 6f 6e 20 31 32 2e 36 56 00     3S Li-Ion 12.6V.

000000c8 <__c.2252>:
      c8:	4f 46 46 00                                         OFF.

000000cc <__c.2250>:
      cc:	4f 4e 20 00                                         ON .

000000d0 <__c.2248>:
      d0:	53 43 41 4e 2f 00                                   SCAN/.

000000d6 <__c.2246>:
      d6:	41 55 54 4f 2f 00                                   AUTO/.

000000dc <__c.2244>:
      dc:	4f 46 46 2f 00                                      OFF/.

000000e1 <__c.2242>:
      e1:	4f 4e 2f 00                                         ON/.

000000e5 <__c.2240>:
      e5:	2f 00                                               /.

000000e7 <font5x7>:
      e7:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      f7:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     107:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     117:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     127:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     137:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     147:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     157:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     167:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     177:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     187:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     197:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     1a7:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     1b7:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1c7:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1d7:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1e7:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1f7:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     207:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     217:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     227:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     237:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     247:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     257:	40 00 40 80 84 7d 00 00 7f 10 28 44 00 41 7f 40     @.@..}....(D.A.@
     267:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     277:	fc 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     .........||....H
     287:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     297:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     2a7:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     2b7:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..
	...

000002c8 <__ctors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e1       	ldi	r29, 0x10	; 16
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e6 ef       	ldi	r30, 0xF6	; 246
     2dc:	f2 e1       	ldi	r31, 0x12	; 18
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__do_copy_data+0x10>
     2e0:	05 90       	lpm	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	ac 30       	cpi	r26, 0x0C	; 12
     2e6:	b1 07       	cpc	r27, r17
     2e8:	d9 f7       	brne	.-10     	; 0x2e0 <__do_copy_data+0xc>

000002ea <__do_clear_bss>:
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	ac e0       	ldi	r26, 0x0C	; 12
     2ee:	b1 e0       	ldi	r27, 0x01	; 1
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <.do_clear_bss_start>

000002f2 <.do_clear_bss_loop>:
     2f2:	1d 92       	st	X+, r1

000002f4 <.do_clear_bss_start>:
     2f4:	a2 34       	cpi	r26, 0x42	; 66
     2f6:	b2 07       	cpc	r27, r18
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <.do_clear_bss_loop>
     2fa:	0e 94 06 05 	call	0xa0c	; 0xa0c <main>
     2fe:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <_exit>

00000302 <__bad_interrupt>:
     302:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000306 <ADC_Init>:

void ADC_Init(void){
	
	/*PRR0 &= ~(1 << PRADC); Mise à zéro du bit Power Reduction ADC dans le Power Reduction Register. Pas nécessaire car initialisé à zéro. */
	
	DIDR0 = ((1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D));	/* Disabling the digital input buffers because they're not needed. */
     306:	80 ef       	ldi	r24, 0xF0	; 240
     308:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f007e>
	ADCSRA = ((1 << ADEN)|(1 << ADSC)|(1 << ADATE)|(1 << ADIE)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));/* ADC Enable, ADC Start Conversion, ADC Auto trigger enable
     30c:	8f ee       	ldi	r24, 0xEF	; 239
     30e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
																										ADC Interrupt Enable, Prescaler = 128, */
	ACSR = (1 << ACD); /* Set analog comparator disable bit to preserve power */
     312:	80 e8       	ldi	r24, 0x80	; 128
     314:	80 bf       	out	0x30, r24	; 48
	
	ADMUX = (uint8_t)MUX_PV_V;
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
	ADC_Data.MuxHasChanged = true;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <ADC_Data+0x10>
     322:	08 95       	ret

00000324 <ADC_Get_Analog_Data>:
	
	
}

void ADC_Get_Analog_Data(volatile Analog_Data_t* Analog_Data, volatile Battery_Data_t* Battery_Limits){
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
     336:	8b 01       	movw	r16, r22
	
	
	Analog_Data->PV_V = ADC_Data.Raw_PV_V * PV_V_GAIN; /* PV_V in millivolts*/
     338:	e8 e2       	ldi	r30, 0x28	; 40
     33a:	f1 e0       	ldi	r31, 0x01	; 1
     33c:	20 81       	ld	r18, Z
     33e:	31 81       	ldd	r19, Z+1	; 0x01
     340:	4c e1       	ldi	r20, 0x1C	; 28
     342:	42 9f       	mul	r20, r18
     344:	c0 01       	movw	r24, r0
     346:	43 9f       	mul	r20, r19
     348:	90 0d       	add	r25, r0
     34a:	11 24       	eor	r1, r1
     34c:	99 83       	std	Y+1, r25	; 0x01
     34e:	88 83       	st	Y, r24
	Analog_Data->PV_I = (ADC_Data.Raw_PV_I - PV_I_OFFSET) * PV_I_GAIN; /* PV_I in milliamps */
     350:	82 81       	ldd	r24, Z+2	; 0x02
     352:	93 81       	ldd	r25, Z+3	; 0x03
     354:	09 97       	sbiw	r24, 0x09	; 9
     356:	9b 83       	std	Y+3, r25	; 0x03
     358:	8a 83       	std	Y+2, r24	; 0x02
	Analog_Data->Batt_V = ADC_Data.Raw_Batt_V * BATT_V_GAIN; /* Batt_V in millivolts*/	
     35a:	84 81       	ldd	r24, Z+4	; 0x04
     35c:	95 81       	ldd	r25, Z+5	; 0x05
     35e:	82 95       	swap	r24
     360:	92 95       	swap	r25
     362:	90 7f       	andi	r25, 0xF0	; 240
     364:	98 27       	eor	r25, r24
     366:	80 7f       	andi	r24, 0xF0	; 240
     368:	98 27       	eor	r25, r24
     36a:	9b 87       	std	Y+11, r25	; 0x0b
     36c:	8a 87       	std	Y+10, r24	; 0x0a
	Analog_Data->Batt_I = (ADC_Data.Raw_Batt_I - BATT_I_OFFSET) * BATT_I_GAIN; /*Batt_I in milliamps*/
     36e:	26 81       	ldd	r18, Z+6	; 0x06
     370:	37 81       	ldd	r19, Z+7	; 0x07
     372:	4b ef       	ldi	r20, 0xFB	; 251
     374:	42 03       	mulsu	r20, r18
     376:	c0 01       	movw	r24, r0
     378:	43 9f       	mul	r20, r19
     37a:	90 0d       	add	r25, r0
     37c:	11 24       	eor	r1, r1
     37e:	8d 55       	subi	r24, 0x5D	; 93
     380:	98 4f       	sbci	r25, 0xF8	; 248
     382:	9d 87       	std	Y+13, r25	; 0x0d
     384:	8c 87       	std	Y+12, r24	; 0x0c

	Analog_Data->PV_P = (int16_t)(((int32_t)Analog_Data->PV_V * (int32_t)Analog_Data->PV_I)/1000); /* PV_P in milliwatts*/
     386:	28 81       	ld	r18, Y
     388:	39 81       	ldd	r19, Y+1	; 0x01
     38a:	aa 81       	ldd	r26, Y+2	; 0x02
     38c:	bb 81       	ldd	r27, Y+3	; 0x03
     38e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__mulhisi3>
     392:	0f 2e       	mov	r0, r31
     394:	f8 ee       	ldi	r31, 0xE8	; 232
     396:	cf 2e       	mov	r12, r31
     398:	f3 e0       	ldi	r31, 0x03	; 3
     39a:	df 2e       	mov	r13, r31
     39c:	e1 2c       	mov	r14, r1
     39e:	f1 2c       	mov	r15, r1
     3a0:	f0 2d       	mov	r31, r0
     3a2:	a7 01       	movw	r20, r14
     3a4:	96 01       	movw	r18, r12
     3a6:	0e 94 b1 08 	call	0x1162	; 0x1162 <__divmodsi4>
     3aa:	3d 83       	std	Y+5, r19	; 0x05
     3ac:	2c 83       	std	Y+4, r18	; 0x04
	
	Analog_Data->Batt_P = (int16_t)(((int32_t)Analog_Data->Batt_V * (int32_t)Analog_Data->Batt_I)/1000); /* Batt_P in milliwatts*/
     3ae:	2a 85       	ldd	r18, Y+10	; 0x0a
     3b0:	3b 85       	ldd	r19, Y+11	; 0x0b
     3b2:	ac 85       	ldd	r26, Y+12	; 0x0c
     3b4:	bd 85       	ldd	r27, Y+13	; 0x0d
     3b6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__mulhisi3>
     3ba:	a7 01       	movw	r20, r14
     3bc:	96 01       	movw	r18, r12
     3be:	0e 94 b1 08 	call	0x1162	; 0x1162 <__divmodsi4>
     3c2:	3f 87       	std	Y+15, r19	; 0x0f
     3c4:	2e 87       	std	Y+14, r18	; 0x0e
	
	if (Analog_Data->Batt_V > Battery_Limits->Batt_OV_Cut_In){ /* Update of battery overvoltage flag */
     3c6:	2a 85       	ldd	r18, Y+10	; 0x0a
     3c8:	3b 85       	ldd	r19, Y+11	; 0x0b
     3ca:	f8 01       	movw	r30, r16
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	82 17       	cp	r24, r18
     3d2:	93 07       	cpc	r25, r19
     3d4:	1c f4       	brge	.+6      	; 0x3dc <ADC_Get_Analog_Data+0xb8>
			
		Analog_Data->Batt_OV = true;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	88 8b       	std	Y+16, r24	; 0x10
     3da:	09 c0       	rjmp	.+18     	; 0x3ee <ADC_Get_Analog_Data+0xca>
	}
	else if (Analog_Data->Batt_V < Battery_Limits->Batt_OV_Cut_Out){
     3dc:	2a 85       	ldd	r18, Y+10	; 0x0a
     3de:	3b 85       	ldd	r19, Y+11	; 0x0b
     3e0:	f8 01       	movw	r30, r16
     3e2:	82 81       	ldd	r24, Z+2	; 0x02
     3e4:	93 81       	ldd	r25, Z+3	; 0x03
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	0c f4       	brge	.+2      	; 0x3ee <ADC_Get_Analog_Data+0xca>
			
		Analog_Data->Batt_OV = false;
     3ec:	18 8a       	std	Y+16, r1	; 0x10
	}
	
	if (Analog_Data->Batt_V < Battery_Limits->Batt_UV_Cut_In){ /* Update of battery undervoltage flag */
     3ee:	2a 85       	ldd	r18, Y+10	; 0x0a
     3f0:	3b 85       	ldd	r19, Y+11	; 0x0b
     3f2:	f8 01       	movw	r30, r16
     3f4:	84 81       	ldd	r24, Z+4	; 0x04
     3f6:	95 81       	ldd	r25, Z+5	; 0x05
     3f8:	28 17       	cp	r18, r24
     3fa:	39 07       	cpc	r19, r25
     3fc:	1c f4       	brge	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		
		Analog_Data->Batt_UV = true;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	89 8b       	std	Y+17, r24	; 0x11
     402:	09 c0       	rjmp	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	}
	else if (Analog_Data->Batt_V > Battery_Limits->Batt_UV_Cut_Out){
     404:	2a 85       	ldd	r18, Y+10	; 0x0a
     406:	3b 85       	ldd	r19, Y+11	; 0x0b
     408:	f8 01       	movw	r30, r16
     40a:	86 81       	ldd	r24, Z+6	; 0x06
     40c:	97 81       	ldd	r25, Z+7	; 0x07
     40e:	82 17       	cp	r24, r18
     410:	93 07       	cpc	r25, r19
     412:	0c f4       	brge	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		
		Analog_Data->Batt_UV = false;
     414:	19 8a       	std	Y+17, r1	; 0x11
	}
	
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <Analog_Calc_Avg>:

void Analog_Calc_Avg(volatile Analog_Data_t* Analog_Data){
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	fc 01       	movw	r30, r24
	
	Analog_Data->PV_P_avg = Analog_Data->PV_P_avg + (Analog_Data->PV_P - ((Analog_Data->PV_P_avg)>>SHIFT_FOR_AVG))*FILTERING_CONSTANT;
     432:	c6 80       	ldd	r12, Z+6	; 0x06
     434:	d7 80       	ldd	r13, Z+7	; 0x07
     436:	e0 84       	ldd	r14, Z+8	; 0x08
     438:	f1 84       	ldd	r15, Z+9	; 0x09
     43a:	24 81       	ldd	r18, Z+4	; 0x04
     43c:	35 81       	ldd	r19, Z+5	; 0x05
     43e:	86 81       	ldd	r24, Z+6	; 0x06
     440:	97 81       	ldd	r25, Z+7	; 0x07
     442:	a0 85       	ldd	r26, Z+8	; 0x08
     444:	b1 85       	ldd	r27, Z+9	; 0x09
     446:	cd 01       	movw	r24, r26
     448:	bb 27       	eor	r27, r27
     44a:	97 fd       	sbrc	r25, 7
     44c:	b0 95       	com	r27
     44e:	ab 2f       	mov	r26, r27
     450:	a9 01       	movw	r20, r18
     452:	33 0f       	add	r19, r19
     454:	66 0b       	sbc	r22, r22
     456:	77 0b       	sbc	r23, r23
     458:	9a 01       	movw	r18, r20
     45a:	ab 01       	movw	r20, r22
     45c:	28 1b       	sub	r18, r24
     45e:	39 0b       	sbc	r19, r25
     460:	4a 0b       	sbc	r20, r26
     462:	5b 0b       	sbc	r21, r27
     464:	a7 e2       	ldi	r26, 0x27	; 39
     466:	b5 e1       	ldi	r27, 0x15	; 21
     468:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__muluhisi3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	8c 0d       	add	r24, r12
     472:	9d 1d       	adc	r25, r13
     474:	ae 1d       	adc	r26, r14
     476:	bf 1d       	adc	r27, r15
     478:	86 83       	std	Z+6, r24	; 0x06
     47a:	97 83       	std	Z+7, r25	; 0x07
     47c:	a0 87       	std	Z+8, r26	; 0x08
     47e:	b1 87       	std	Z+9, r27	; 0x09
	
}
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	08 95       	ret

0000048a <__vector_24>:



ISR(ADC_vect){
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
	
	/*LEDs_Set_State(LEDs_Get_State() ^ 0b00000010);*/
	
	//LEDs_Set_State(~(LEDs_Get_State()));
	
	if (ADC_Data.MuxHasChanged)			/* Si il s'agit de la première conversion après changement du multiplexeur*/
     4a0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ADC_Data+0x10>
     4a4:	88 23       	and	r24, r24
     4a6:	19 f0       	breq	.+6      	; 0x4ae <__vector_24+0x24>
	{
		ADC_Data.MuxHasChanged = false;		/* On ne fait rien (on ignore la valeur obtenue). Et la prochaine conversion sera valide */
     4a8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ADC_Data+0x10>
     4ac:	b5 c0       	rjmp	.+362    	; 0x618 <__vector_24+0x18e>
	} 
	else								/* Si il ne s'agit pas d'une première conversion */
	{
		switch ((ADC_Mux_Setting_t)ADMUX)	/* Selon l'état du MUX on accumule le résultat de la conversion dans la bonne variable */
     4ae:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	a9 f1       	breq	.+106    	; 0x520 <__vector_24+0x96>
     4b6:	18 f4       	brcc	.+6      	; 0x4be <__vector_24+0x34>
     4b8:	84 30       	cpi	r24, 0x04	; 4
     4ba:	41 f0       	breq	.+16     	; 0x4cc <__vector_24+0x42>
     4bc:	ad c0       	rjmp	.+346    	; 0x618 <__vector_24+0x18e>
     4be:	86 30       	cpi	r24, 0x06	; 6
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__vector_24+0x3a>
     4c2:	58 c0       	rjmp	.+176    	; 0x574 <__vector_24+0xea>
     4c4:	87 30       	cpi	r24, 0x07	; 7
     4c6:	09 f4       	brne	.+2      	; 0x4ca <__vector_24+0x40>
     4c8:	7f c0       	rjmp	.+254    	; 0x5c8 <__vector_24+0x13e>
     4ca:	a6 c0       	rjmp	.+332    	; 0x618 <__vector_24+0x18e>
		{
		case MUX_PV_V:
			ADC_Data.Raw_PV_V_Accu += ADC;
     4cc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
     4d0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
     4d4:	e8 e2       	ldi	r30, 0x28	; 40
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	80 85       	ldd	r24, Z+8	; 0x08
     4da:	91 85       	ldd	r25, Z+9	; 0x09
     4dc:	82 0f       	add	r24, r18
     4de:	93 1f       	adc	r25, r19
     4e0:	91 87       	std	Z+9, r25	; 0x09
     4e2:	80 87       	std	Z+8, r24	; 0x08
			ADC_Data.NumberOfSamples++;
     4e4:	81 89       	ldd	r24, Z+17	; 0x11
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	81 8b       	std	Z+17, r24	; 0x11
			
			if (ADC_Data.NumberOfSamples >= AVG_N)	/* Si le nombre d'échantillons désiré est atteint*/
     4ea:	81 89       	ldd	r24, Z+17	; 0x11
     4ec:	88 30       	cpi	r24, 0x08	; 8
     4ee:	08 f4       	brcc	.+2      	; 0x4f2 <__vector_24+0x68>
     4f0:	93 c0       	rjmp	.+294    	; 0x618 <__vector_24+0x18e>
			{
				ADC_Data.Raw_PV_V_Accu >>= AVG_POWER;			/* Le résultat de l'accumulation est divisé par le nombre d'échantillons */
     4f2:	80 85       	ldd	r24, Z+8	; 0x08
     4f4:	91 85       	ldd	r25, Z+9	; 0x09
     4f6:	96 95       	lsr	r25
     4f8:	87 95       	ror	r24
     4fa:	96 95       	lsr	r25
     4fc:	87 95       	ror	r24
     4fe:	96 95       	lsr	r25
     500:	87 95       	ror	r24
     502:	91 87       	std	Z+9, r25	; 0x09
     504:	80 87       	std	Z+8, r24	; 0x08
				ADC_Data.Raw_PV_V = ADC_Data.Raw_PV_V_Accu;	/*  Puis est transféré */				
     506:	80 85       	ldd	r24, Z+8	; 0x08
     508:	91 85       	ldd	r25, Z+9	; 0x09
     50a:	91 83       	std	Z+1, r25	; 0x01
     50c:	80 83       	st	Z, r24
				ADC_Data.Raw_PV_V_Accu = 0;					/* L'accumulateur est remis à zéro */
     50e:	11 86       	std	Z+9, r1	; 0x09
     510:	10 86       	std	Z+8, r1	; 0x08
				ADC_Data.NumberOfSamples = 0;				/* Le compteur d'échantillons est remis à zéro */
     512:	11 8a       	std	Z+17, r1	; 0x11
				ADMUX = (uint8_t)MUX_PV_I;					/* Le multiplexeur est changé d'état pour le prochain canal */
     514:	85 e0       	ldi	r24, 0x05	; 5
     516:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
				ADC_Data.MuxHasChanged = true;				/* L'indicateur de changement du multiplexeur est mis à "vrai" */
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 8b       	std	Z+16, r24	; 0x10
     51e:	7c c0       	rjmp	.+248    	; 0x618 <__vector_24+0x18e>
			
			break;
			
		case MUX_PV_I:
			
			ADC_Data.Raw_PV_I_Accu += ADC;
     520:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
     524:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
     528:	e8 e2       	ldi	r30, 0x28	; 40
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	82 85       	ldd	r24, Z+10	; 0x0a
     52e:	93 85       	ldd	r25, Z+11	; 0x0b
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	93 87       	std	Z+11, r25	; 0x0b
     536:	82 87       	std	Z+10, r24	; 0x0a
			ADC_Data.NumberOfSamples++;
     538:	81 89       	ldd	r24, Z+17	; 0x11
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	81 8b       	std	Z+17, r24	; 0x11
			
			if (ADC_Data.NumberOfSamples >= AVG_N)
     53e:	81 89       	ldd	r24, Z+17	; 0x11
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	08 f4       	brcc	.+2      	; 0x546 <__vector_24+0xbc>
     544:	69 c0       	rjmp	.+210    	; 0x618 <__vector_24+0x18e>
			{
				
				ADC_Data.Raw_PV_I_Accu >>= AVG_POWER;
     546:	82 85       	ldd	r24, Z+10	; 0x0a
     548:	93 85       	ldd	r25, Z+11	; 0x0b
     54a:	96 95       	lsr	r25
     54c:	87 95       	ror	r24
     54e:	96 95       	lsr	r25
     550:	87 95       	ror	r24
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	93 87       	std	Z+11, r25	; 0x0b
     558:	82 87       	std	Z+10, r24	; 0x0a
				ADC_Data.Raw_PV_I = ADC_Data.Raw_PV_I_Accu;
     55a:	82 85       	ldd	r24, Z+10	; 0x0a
     55c:	93 85       	ldd	r25, Z+11	; 0x0b
     55e:	93 83       	std	Z+3, r25	; 0x03
     560:	82 83       	std	Z+2, r24	; 0x02
				ADC_Data.Raw_PV_I_Accu = 0;
     562:	13 86       	std	Z+11, r1	; 0x0b
     564:	12 86       	std	Z+10, r1	; 0x0a
				ADC_Data.NumberOfSamples = 0;
     566:	11 8a       	std	Z+17, r1	; 0x11
				ADMUX = (uint8_t)MUX_Batt_V;
     568:	86 e0       	ldi	r24, 0x06	; 6
     56a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
				ADC_Data.MuxHasChanged = true;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 8b       	std	Z+16, r24	; 0x10
     572:	52 c0       	rjmp	.+164    	; 0x618 <__vector_24+0x18e>
			
			break;
			
		case MUX_Batt_V:
			
			ADC_Data.Raw_Batt_V_Accu += ADC;
     574:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
     578:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
     57c:	e8 e2       	ldi	r30, 0x28	; 40
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	84 85       	ldd	r24, Z+12	; 0x0c
     582:	95 85       	ldd	r25, Z+13	; 0x0d
     584:	82 0f       	add	r24, r18
     586:	93 1f       	adc	r25, r19
     588:	95 87       	std	Z+13, r25	; 0x0d
     58a:	84 87       	std	Z+12, r24	; 0x0c
			ADC_Data.NumberOfSamples++;
     58c:	81 89       	ldd	r24, Z+17	; 0x11
     58e:	8f 5f       	subi	r24, 0xFF	; 255
     590:	81 8b       	std	Z+17, r24	; 0x11
			
			
			if (ADC_Data.NumberOfSamples >= AVG_N)
     592:	81 89       	ldd	r24, Z+17	; 0x11
     594:	88 30       	cpi	r24, 0x08	; 8
     596:	08 f4       	brcc	.+2      	; 0x59a <__vector_24+0x110>
     598:	3f c0       	rjmp	.+126    	; 0x618 <__vector_24+0x18e>
			{
				
				ADC_Data.Raw_Batt_V_Accu >>= AVG_POWER;
     59a:	84 85       	ldd	r24, Z+12	; 0x0c
     59c:	95 85       	ldd	r25, Z+13	; 0x0d
     59e:	96 95       	lsr	r25
     5a0:	87 95       	ror	r24
     5a2:	96 95       	lsr	r25
     5a4:	87 95       	ror	r24
     5a6:	96 95       	lsr	r25
     5a8:	87 95       	ror	r24
     5aa:	95 87       	std	Z+13, r25	; 0x0d
     5ac:	84 87       	std	Z+12, r24	; 0x0c
				ADC_Data.Raw_Batt_V = ADC_Data.Raw_Batt_V_Accu;
     5ae:	84 85       	ldd	r24, Z+12	; 0x0c
     5b0:	95 85       	ldd	r25, Z+13	; 0x0d
     5b2:	95 83       	std	Z+5, r25	; 0x05
     5b4:	84 83       	std	Z+4, r24	; 0x04
				ADC_Data.Raw_Batt_V_Accu = 0;
     5b6:	15 86       	std	Z+13, r1	; 0x0d
     5b8:	14 86       	std	Z+12, r1	; 0x0c
				ADC_Data.NumberOfSamples = 0;
     5ba:	11 8a       	std	Z+17, r1	; 0x11
				ADMUX = (uint8_t)MUX_Batt_I;
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
				ADC_Data.MuxHasChanged = true;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 8b       	std	Z+16, r24	; 0x10
     5c6:	28 c0       	rjmp	.+80     	; 0x618 <__vector_24+0x18e>
			
			break;
			
		case MUX_Batt_I:
		
			ADC_Data.Raw_Batt_I_Accu += ADC;
     5c8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
     5cc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
     5d0:	e8 e2       	ldi	r30, 0x28	; 40
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	86 85       	ldd	r24, Z+14	; 0x0e
     5d6:	97 85       	ldd	r25, Z+15	; 0x0f
     5d8:	82 0f       	add	r24, r18
     5da:	93 1f       	adc	r25, r19
     5dc:	97 87       	std	Z+15, r25	; 0x0f
     5de:	86 87       	std	Z+14, r24	; 0x0e
			ADC_Data.NumberOfSamples++;
     5e0:	81 89       	ldd	r24, Z+17	; 0x11
     5e2:	8f 5f       	subi	r24, 0xFF	; 255
     5e4:	81 8b       	std	Z+17, r24	; 0x11
			
			
			if (ADC_Data.NumberOfSamples >= AVG_N)
     5e6:	81 89       	ldd	r24, Z+17	; 0x11
     5e8:	88 30       	cpi	r24, 0x08	; 8
     5ea:	b0 f0       	brcs	.+44     	; 0x618 <__vector_24+0x18e>
			{
				
				ADC_Data.Raw_Batt_I_Accu >>= AVG_POWER;
     5ec:	86 85       	ldd	r24, Z+14	; 0x0e
     5ee:	97 85       	ldd	r25, Z+15	; 0x0f
     5f0:	96 95       	lsr	r25
     5f2:	87 95       	ror	r24
     5f4:	96 95       	lsr	r25
     5f6:	87 95       	ror	r24
     5f8:	96 95       	lsr	r25
     5fa:	87 95       	ror	r24
     5fc:	97 87       	std	Z+15, r25	; 0x0f
     5fe:	86 87       	std	Z+14, r24	; 0x0e
				ADC_Data.Raw_Batt_I = ADC_Data.Raw_Batt_I_Accu;
     600:	86 85       	ldd	r24, Z+14	; 0x0e
     602:	97 85       	ldd	r25, Z+15	; 0x0f
     604:	97 83       	std	Z+7, r25	; 0x07
     606:	86 83       	std	Z+6, r24	; 0x06
				ADC_Data.Raw_Batt_I_Accu = 0;
     608:	17 86       	std	Z+15, r1	; 0x0f
     60a:	16 86       	std	Z+14, r1	; 0x0e
				ADC_Data.NumberOfSamples = 0;
     60c:	11 8a       	std	Z+17, r1	; 0x11
				ADMUX = (uint8_t)MUX_PV_V;			/* Après que les quatre canaux aient été fait, retour au premier canal. */
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
				ADC_Data.MuxHasChanged = true;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 8b       	std	Z+16, r24	; 0x10
			break;
		}
	}
	
		//LEDs_Set_State(0);
     618:	ff 91       	pop	r31
     61a:	ef 91       	pop	r30
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	3f 91       	pop	r19
     622:	2f 91       	pop	r18
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <Buttons_LEDs_Init>:
	uint8_t state = LEDS_PORT & (LED_BLUE | LED_YELLOW); /* Lecture du port avec masque */
	
	state >>= PD2; /* Right bit shift pour ramener les bits au LSB et avoir les états 0,1,2,3 */
	
	return state;
}
     62e:	8a b1       	in	r24, 0x0a	; 10
     630:	8c 60       	ori	r24, 0x0C	; 12
     632:	8a b9       	out	0x0a, r24	; 10
     634:	81 b1       	in	r24, 0x01	; 1
     636:	89 7f       	andi	r24, 0xF9	; 249
     638:	81 b9       	out	0x01, r24	; 1
     63a:	82 b1       	in	r24, 0x02	; 2
     63c:	86 60       	ori	r24, 0x06	; 6
     63e:	82 b9       	out	0x02, r24	; 2
     640:	08 95       	ret

00000642 <Buttons_Get_State>:
     642:	80 b1       	in	r24, 0x00	; 0
     644:	80 95       	com	r24
     646:	86 70       	andi	r24, 0x06	; 6
     648:	86 95       	lsr	r24
     64a:	08 95       	ret

0000064c <Buttons_Watch_for_Event>:


void Buttons_Watch_for_Event(volatile Button_Event_t* Button_Event){
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
	
	
	uint8_t Button_State = Buttons_Get_State();
     652:	0e 94 21 03 	call	0x642	; 0x642 <Buttons_Get_State>
	
	static uint8_t Pressed_Buttons = 0;
	
	Pressed_Buttons |= Button_State; /* Stores the buttons that have been pressed*/
     656:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
     65a:	98 2b       	or	r25, r24
     65c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
	
	if (!Button_State){
     660:	81 11       	cpse	r24, r1
     662:	03 c0       	rjmp	.+6      	; 0x66a <Buttons_Watch_for_Event+0x1e>
		
		*Button_Event = (Button_Event_t)Pressed_Buttons;
     664:	98 83       	st	Y, r25
		Pressed_Buttons = 0;
     666:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		
	}

}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <Display_P_I_V_Conv_State>:
	glcd_WriteString(String_Buffer);
	
}*/


void Display_P_I_V_Conv_State(volatile Analog_Data_t* Analog_Data, int16_t Peak_PV_P, bool State, uint8_t Duty, Converter_User_Required_State_t User_Conv_State){
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	2a 97       	sbiw	r28, 0x0a	; 10
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	8c 01       	movw	r16, r24
     694:	5b 01       	movw	r10, r22
     696:	d4 2e       	mov	r13, r20
     698:	e2 2e       	mov	r14, r18
	
	
	char String_Buffer[8];
	uint8_t x_pos, y_pos;
	
	glcd_fillScreen(0);
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 19 06 	call	0xc32	; 0xc32 <glcd_fillScreen>
	
	x_pos = 0;
     6a0:	19 86       	std	Y+9, r1	; 0x09
	y_pos = 0;
     6a2:	1a 86       	std	Y+10, r1	; 0x0a
	itoa(Analog_Data->PV_V, String_Buffer, DECIMAL);
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6aa:	4a e0       	ldi	r20, 0x0A	; 10
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     6b6:	ae 01       	movw	r20, r28
     6b8:	4f 5f       	subi	r20, 0xFF	; 255
     6ba:	5f 4f       	sbci	r21, 0xFF	; 255
     6bc:	be 01       	movw	r22, r28
     6be:	66 5f       	subi	r22, 0xF6	; 246
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	ce 01       	movw	r24, r28
     6c4:	09 96       	adiw	r24, 0x09	; 9
     6c6:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
	x_pos = 64;
     6ca:	68 94       	set
     6cc:	ff 24       	eor	r15, r15
     6ce:	f6 f8       	bld	r15, 6
     6d0:	f9 86       	std	Y+9, r15	; 0x09
	itoa((int)((Analog_Data->PV_P_avg)>>SHIFT_FOR_AVG), String_Buffer, DECIMAL);
     6d2:	f8 01       	movw	r30, r16
     6d4:	86 81       	ldd	r24, Z+6	; 0x06
     6d6:	97 81       	ldd	r25, Z+7	; 0x07
     6d8:	a0 85       	ldd	r26, Z+8	; 0x08
     6da:	b1 85       	ldd	r27, Z+9	; 0x09
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	cd 01       	movw	r24, r26
     6e6:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     6ea:	ae 01       	movw	r20, r28
     6ec:	4f 5f       	subi	r20, 0xFF	; 255
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	be 01       	movw	r22, r28
     6f2:	66 5f       	subi	r22, 0xF6	; 246
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	ce 01       	movw	r24, r28
     6f8:	09 96       	adiw	r24, 0x09	; 9
     6fa:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	glcd_WriteString_P(&x_pos, &y_pos,PSTR("/"));
     6fe:	45 ee       	ldi	r20, 0xE5	; 229
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	be 01       	movw	r22, r28
     704:	66 5f       	subi	r22, 0xF6	; 246
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	ce 01       	movw	r24, r28
     70a:	09 96       	adiw	r24, 0x09	; 9
     70c:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     710:	4a e0       	ldi	r20, 0x0A	; 10
     712:	be 01       	movw	r22, r28
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	c5 01       	movw	r24, r10
     71a:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	itoa(Peak_PV_P, String_Buffer, DECIMAL);
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     71e:	ae 01       	movw	r20, r28
     720:	4f 5f       	subi	r20, 0xFF	; 255
     722:	5f 4f       	sbci	r21, 0xFF	; 255
     724:	be 01       	movw	r22, r28
     726:	66 5f       	subi	r22, 0xF6	; 246
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	ce 01       	movw	r24, r28
     72c:	09 96       	adiw	r24, 0x09	; 9
     72e:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
	x_pos = 0;
     732:	19 86       	std	Y+9, r1	; 0x09
	y_pos = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	8a 87       	std	Y+10, r24	; 0x0a
	itoa(Analog_Data->PV_I, String_Buffer, DECIMAL);
     738:	f8 01       	movw	r30, r16
     73a:	82 81       	ldd	r24, Z+2	; 0x02
     73c:	93 81       	ldd	r25, Z+3	; 0x03
     73e:	4a e0       	ldi	r20, 0x0A	; 10
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     74a:	ae 01       	movw	r20, r28
     74c:	4f 5f       	subi	r20, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	be 01       	movw	r22, r28
     752:	66 5f       	subi	r22, 0xF6	; 246
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	ce 01       	movw	r24, r28
     758:	09 96       	adiw	r24, 0x09	; 9
     75a:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
	x_pos = 64;
     75e:	f9 86       	std	Y+9, r15	; 0x09
	if (Converter_User_Required_State == ON){
     760:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Converter_User_Required_State>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	51 f4       	brne	.+20     	; 0x77c <Display_P_I_V_Conv_State+0x10c>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("ON/"));
     768:	41 ee       	ldi	r20, 0xE1	; 225
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	be 01       	movw	r22, r28
     76e:	66 5f       	subi	r22, 0xF6	; 246
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	ce 01       	movw	r24, r28
     774:	09 96       	adiw	r24, 0x09	; 9
     776:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     77a:	29 c0       	rjmp	.+82     	; 0x7ce <Display_P_I_V_Conv_State+0x15e>
	}
	else if (Converter_User_Required_State == OFF){
     77c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Converter_User_Required_State>
     780:	81 11       	cpse	r24, r1
     782:	0a c0       	rjmp	.+20     	; 0x798 <Display_P_I_V_Conv_State+0x128>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("OFF/"));
     784:	4c ed       	ldi	r20, 0xDC	; 220
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	be 01       	movw	r22, r28
     78a:	66 5f       	subi	r22, 0xF6	; 246
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	ce 01       	movw	r24, r28
     790:	09 96       	adiw	r24, 0x09	; 9
     792:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     796:	1b c0       	rjmp	.+54     	; 0x7ce <Display_P_I_V_Conv_State+0x15e>
	}
	else if (Converter_User_Required_State == AUTO){
     798:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Converter_User_Required_State>
     79c:	82 30       	cpi	r24, 0x02	; 2
     79e:	51 f4       	brne	.+20     	; 0x7b4 <Display_P_I_V_Conv_State+0x144>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("AUTO/"));
     7a0:	46 ed       	ldi	r20, 0xD6	; 214
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	be 01       	movw	r22, r28
     7a6:	66 5f       	subi	r22, 0xF6	; 246
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	ce 01       	movw	r24, r28
     7ac:	09 96       	adiw	r24, 0x09	; 9
     7ae:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     7b2:	0d c0       	rjmp	.+26     	; 0x7ce <Display_P_I_V_Conv_State+0x15e>
	}
	else if (Converter_User_Required_State == SCAN){
     7b4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Converter_User_Required_State>
     7b8:	83 30       	cpi	r24, 0x03	; 3
     7ba:	49 f4       	brne	.+18     	; 0x7ce <Display_P_I_V_Conv_State+0x15e>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("SCAN/"));
     7bc:	40 ed       	ldi	r20, 0xD0	; 208
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	be 01       	movw	r22, r28
     7c2:	66 5f       	subi	r22, 0xF6	; 246
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	ce 01       	movw	r24, r28
     7c8:	09 96       	adiw	r24, 0x09	; 9
     7ca:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
	}
	
	if (State){
     7ce:	dd 20       	and	r13, r13
     7d0:	51 f0       	breq	.+20     	; 0x7e6 <Display_P_I_V_Conv_State+0x176>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("ON "));
     7d2:	4c ec       	ldi	r20, 0xCC	; 204
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	be 01       	movw	r22, r28
     7d8:	66 5f       	subi	r22, 0xF6	; 246
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	ce 01       	movw	r24, r28
     7de:	09 96       	adiw	r24, 0x09	; 9
     7e0:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <Display_P_I_V_Conv_State+0x188>
	}
	else {
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("OFF"));
     7e6:	48 ec       	ldi	r20, 0xC8	; 200
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	be 01       	movw	r22, r28
     7ec:	66 5f       	subi	r22, 0xF6	; 246
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	ce 01       	movw	r24, r28
     7f2:	09 96       	adiw	r24, 0x09	; 9
     7f4:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
	}
	
	
	x_pos = 0;
     7f8:	19 86       	std	Y+9, r1	; 0x09
	y_pos = 2;
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	8a 87       	std	Y+10, r24	; 0x0a
	itoa(Analog_Data->Batt_V, String_Buffer, DECIMAL);
     7fe:	f8 01       	movw	r30, r16
     800:	82 85       	ldd	r24, Z+10	; 0x0a
     802:	93 85       	ldd	r25, Z+11	; 0x0b
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	be 01       	movw	r22, r28
     808:	6f 5f       	subi	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     810:	ae 01       	movw	r20, r28
     812:	4f 5f       	subi	r20, 0xFF	; 255
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	be 01       	movw	r22, r28
     818:	66 5f       	subi	r22, 0xF6	; 246
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	ce 01       	movw	r24, r28
     81e:	09 96       	adiw	r24, 0x09	; 9
     820:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
	x_pos = 64;
     824:	68 94       	set
     826:	ff 24       	eor	r15, r15
     828:	f6 f8       	bld	r15, 6
     82a:	f9 86       	std	Y+9, r15	; 0x09
	itoa(Analog_Data->Batt_P, String_Buffer, DECIMAL);
     82c:	f8 01       	movw	r30, r16
     82e:	86 85       	ldd	r24, Z+14	; 0x0e
     830:	97 85       	ldd	r25, Z+15	; 0x0f
     832:	4a e0       	ldi	r20, 0x0A	; 10
     834:	be 01       	movw	r22, r28
     836:	6f 5f       	subi	r22, 0xFF	; 255
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     83e:	ae 01       	movw	r20, r28
     840:	4f 5f       	subi	r20, 0xFF	; 255
     842:	5f 4f       	sbci	r21, 0xFF	; 255
     844:	be 01       	movw	r22, r28
     846:	66 5f       	subi	r22, 0xF6	; 246
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	ce 01       	movw	r24, r28
     84c:	09 96       	adiw	r24, 0x09	; 9
     84e:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
	x_pos = 0;
     852:	19 86       	std	Y+9, r1	; 0x09
	y_pos = 3;
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	8a 87       	std	Y+10, r24	; 0x0a
	itoa(Analog_Data->Batt_I, String_Buffer, DECIMAL);
     858:	f8 01       	movw	r30, r16
     85a:	84 85       	ldd	r24, Z+12	; 0x0c
     85c:	95 85       	ldd	r25, Z+13	; 0x0d
     85e:	4a e0       	ldi	r20, 0x0A	; 10
     860:	be 01       	movw	r22, r28
     862:	6f 5f       	subi	r22, 0xFF	; 255
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	be 01       	movw	r22, r28
     872:	66 5f       	subi	r22, 0xF6	; 246
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	ce 01       	movw	r24, r28
     878:	09 96       	adiw	r24, 0x09	; 9
     87a:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
	x_pos = 64;
     87e:	f9 86       	std	Y+9, r15	; 0x09
     880:	4a e0       	ldi	r20, 0x0A	; 10
     882:	be 01       	movw	r22, r28
     884:	6f 5f       	subi	r22, 0xFF	; 255
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	8e 2d       	mov	r24, r14
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__itoa_ncheck>
	itoa(Duty, String_Buffer, DECIMAL);
	glcd_WriteString(&x_pos, &y_pos,String_Buffer);
     890:	ae 01       	movw	r20, r28
     892:	4f 5f       	subi	r20, 0xFF	; 255
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	be 01       	movw	r22, r28
     898:	66 5f       	subi	r22, 0xF6	; 246
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	ce 01       	movw	r24, r28
     89e:	09 96       	adiw	r24, 0x09	; 9
     8a0:	0e 94 b8 06 	call	0xd70	; 0xd70 <glcd_WriteString>
	
}
     8a4:	2a 96       	adiw	r28, 0x0a	; 10
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	bf 90       	pop	r11
     8c0:	af 90       	pop	r10
     8c2:	08 95       	ret

000008c4 <Display_Battery_Type>:

void Display_Battery_Type(uint8_t type){
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <Display_Battery_Type+0x6>
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t x_pos = 0;
     8ce:	19 82       	std	Y+1, r1	; 0x01
	uint8_t y_pos = 0;
     8d0:	1a 82       	std	Y+2, r1	; 0x02
	
	if(type == 3){ /*3S Lithium-Ion Mode*/
     8d2:	83 30       	cpi	r24, 0x03	; 3
     8d4:	51 f4       	brne	.+20     	; 0x8ea <Display_Battery_Type+0x26>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("3S Li-Ion 12.6V"));
     8d6:	48 eb       	ldi	r20, 0xB8	; 184
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	be 01       	movw	r22, r28
     8dc:	6e 5f       	subi	r22, 0xFE	; 254
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     8e8:	21 c0       	rjmp	.+66     	; 0x92c <Display_Battery_Type+0x68>
	
	}
	
	else if (type == 2){ /*2S Lithium-Ion Mode*/
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	51 f4       	brne	.+20     	; 0x902 <Display_Battery_Type+0x3e>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("2S Li-Ion 8.4V"));
     8ee:	49 ea       	ldi	r20, 0xA9	; 169
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	be 01       	movw	r22, r28
     8f4:	6e 5f       	subi	r22, 0xFE	; 254
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     900:	15 c0       	rjmp	.+42     	; 0x92c <Display_Battery_Type+0x68>
		
	}
	
	else if (type == 1){ /* 12V Lead-Acid Mode */
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	51 f4       	brne	.+20     	; 0x91a <Display_Battery_Type+0x56>
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("12V Lead-Acid"));
     906:	4b e9       	ldi	r20, 0x9B	; 155
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	be 01       	movw	r22, r28
     90c:	6e 5f       	subi	r22, 0xFE	; 254
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	ce 01       	movw	r24, r28
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
     918:	09 c0       	rjmp	.+18     	; 0x92c <Display_Battery_Type+0x68>
		
	}
	
	else {	/* 6V Lead-Acid Mode */
		glcd_WriteString_P(&x_pos, &y_pos,PSTR("6V Lead-Acid"));
     91a:	4e e8       	ldi	r20, 0x8E	; 142
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	be 01       	movw	r22, r28
     920:	6e 5f       	subi	r22, 0xFE	; 254
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
			
	}
	
	x_pos = 0;
     92c:	19 82       	std	Y+1, r1	; 0x01
	y_pos = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	8a 83       	std	Y+2, r24	; 0x02
	glcd_WriteString_P(&x_pos, &y_pos,PSTR("battery selected."));
     932:	4c e7       	ldi	r20, 0x7C	; 124
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	be 01       	movw	r22, r28
     938:	6e 5f       	subi	r22, 0xFE	; 254
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_WriteString_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     944:	2f ef       	ldi	r18, 0xFF	; 255
     946:	8a e1       	ldi	r24, 0x1A	; 26
     948:	97 eb       	ldi	r25, 0xB7	; 183
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	80 40       	sbci	r24, 0x00	; 0
     94e:	90 40       	sbci	r25, 0x00	; 0
     950:	e1 f7       	brne	.-8      	; 0x94a <Display_Battery_Type+0x86>
     952:	00 c0       	rjmp	.+0      	; 0x954 <Display_Battery_Type+0x90>
     954:	00 00       	nop
	
	
	_delay_ms(3000);
	
}
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <Backlight_Init>:

void Backlight_Init(void){

	/* !!!WARNING!!! This function does something only after Timer 2 has been initialized, i.e. Timer2_Init(); has been run. */
	
	BACKLIGHT_DDR |= BACKLIGHT_PIN;	/* Met la broche en mode sortie*/
     960:	8a b1       	in	r24, 0x0a	; 10
     962:	80 68       	ori	r24, 0x80	; 128
     964:	8a b9       	out	0x0a, r24	; 10
     966:	08 95       	ret

00000968 <Backlight_Set_Brightness>:
	
}

void Backlight_Set_Brightness(uint8_t brightness){
	
	OCR2A = brightness;
     968:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
     96c:	08 95       	ret

0000096e <Display_Init>:
#include "Display.h"


void Display_Init(void){
	
	glcd_init();
     96e:	0e 94 34 06 	call	0xc68	; 0xc68 <glcd_init>
	glcd_fillScreen(0);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 19 06 	call	0xc32	; 0xc32 <glcd_fillScreen>
	
		//glcd_WriteString_P(PSTR("Test"));
	
	Backlight_Init();
     978:	0e 94 b0 04 	call	0x960	; 0x960 <Backlight_Init>
	Backlight_Set_Brightness(0);
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 b4 04 	call	0x968	; 0x968 <Backlight_Set_Brightness>
     982:	08 95       	ret

00000984 <Logging_Monitor_Values>:
 *  Author: Hugo Boyce
 */ 

#include "Logging.h"

void Logging_Monitor_Values(volatile Analog_Data_t* Analog_Data, volatile Logging_Data_t* Logging_Data){
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	fb 01       	movw	r30, r22
	
	if ((int16_t)((Analog_Data->PV_P_avg)>>SHIFT_FOR_AVG) > Logging_Data->Peak_PV_P){
     98a:	dc 01       	movw	r26, r24
     98c:	16 96       	adiw	r26, 0x06	; 6
     98e:	4d 91       	ld	r20, X+
     990:	5d 91       	ld	r21, X+
     992:	6d 91       	ld	r22, X+
     994:	7c 91       	ld	r23, X
     996:	19 97       	sbiw	r26, 0x09	; 9
     998:	20 81       	ld	r18, Z
     99a:	31 81       	ldd	r19, Z+1	; 0x01
     99c:	26 17       	cp	r18, r22
     99e:	37 07       	cpc	r19, r23
     9a0:	7c f4       	brge	.+30     	; 0x9c0 <Logging_Monitor_Values+0x3c>
		
		Logging_Data->Peak_PV_P = (int16_t)((Analog_Data->PV_P_avg)>>SHIFT_FOR_AVG);
     9a2:	16 96       	adiw	r26, 0x06	; 6
     9a4:	8d 91       	ld	r24, X+
     9a6:	9d 91       	ld	r25, X+
     9a8:	0d 90       	ld	r0, X+
     9aa:	bc 91       	ld	r27, X
     9ac:	a0 2d       	mov	r26, r0
     9ae:	cd 01       	movw	r24, r26
     9b0:	bb 27       	eor	r27, r27
     9b2:	97 fd       	sbrc	r25, 7
     9b4:	b0 95       	com	r27
     9b6:	ab 2f       	mov	r26, r27
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	80 83       	st	Z, r24
		Logging_Data->New_Peak_PV_P = true;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	82 83       	std	Z+2, r24	; 0x02
	}
	
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <Logging_Save_Log>:

void Logging_Save_Log(volatile Logging_Data_t* Logging_Data){
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	
	if (Logging_Data->New_Peak_PV_P){
     9ca:	fc 01       	movw	r30, r24
     9cc:	22 81       	ldd	r18, Z+2	; 0x02
     9ce:	22 23       	and	r18, r18
     9d0:	41 f0       	breq	.+16     	; 0x9e2 <Logging_Save_Log+0x1c>
     9d2:	ec 01       	movw	r28, r24
		
		eeprom_write_word((uint16_t*)EEPROM_ADRESS_PEAK_PV_P,(uint16_t)Logging_Data->Peak_PV_P);
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 56 09 	call	0x12ac	; 0x12ac <eeprom_write_word>
		Logging_Data->New_Peak_PV_P = false;
     9e0:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <Logging_Fetch_Log>:

void Logging_Fetch_Log(volatile Logging_Data_t* Logging_Data){
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
	
	Logging_Data->Peak_PV_P = (int16_t)eeprom_read_word((uint16_t*)EEPROM_ADRESS_PEAK_PV_P);
     9ee:	84 e0       	ldi	r24, 0x04	; 4
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <eeprom_read_word>
     9f6:	99 83       	std	Y+1, r25	; 0x01
     9f8:	88 83       	st	Y, r24
	if(!(~Logging_Data->Peak_PV_P)) { /* If all bits = 1 (EEPROM is blank) */
     9fa:	88 81       	ld	r24, Y
     9fc:	99 81       	ldd	r25, Y+1	; 0x01
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	11 f4       	brne	.+4      	; 0xa06 <Logging_Fetch_Log+0x1e>
		Logging_Data->Peak_PV_P = 0;
     a02:	19 82       	std	Y+1, r1	; 0x01
     a04:	18 82       	st	Y, r1
	}
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <main>:
volatile Converter_User_Required_State_t Converter_User_Required_State;
volatile Button_Event_t Last_Button_Event = NO_BUTTON_PRESS;

int main(void)
{
	Timers_Init();
     a0c:	0e 94 ee 06 	call	0xddc	; 0xddc <Timers_Init>
	Display_Init();
     a10:	0e 94 b7 04 	call	0x96e	; 0x96e <Display_Init>
	Buttons_LEDs_Init();
     a14:	0e 94 17 03 	call	0x62e	; 0x62e <Buttons_LEDs_Init>
	ADC_Init();
     a18:	0e 94 83 01 	call	0x306	; 0x306 <ADC_Init>
	Logging_Fetch_Log(&Current_Logging_Data);
     a1c:	8e e3       	ldi	r24, 0x3E	; 62
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Logging_Fetch_Log>

	sei();	
     a24:	78 94       	sei
     a26:	8f e4       	ldi	r24, 0x4F	; 79
     a28:	93 ec       	ldi	r25, 0xC3	; 195
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <main+0x1e>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <main+0x24>
     a30:	00 00       	nop
	

	_delay_ms(10);
	uint8_t battery_type = Buttons_Get_State();
     a32:	0e 94 21 03 	call	0x642	; 0x642 <Buttons_Get_State>
     a36:	c8 2f       	mov	r28, r24
	Battery_Set_Limits(battery_type, &Battery_Voltage_Limits);
     a38:	6e e0       	ldi	r22, 0x0E	; 14
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	0e 94 66 08 	call	0x10cc	; 0x10cc <Battery_Set_Limits>
	Display_Battery_Type(battery_type);
     a40:	8c 2f       	mov	r24, r28
     a42:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Display_Battery_Type>


	
    while (1) 
    {
		Logging_Save_Log(&Current_Logging_Data);
     a46:	8e e3       	ldi	r24, 0x3E	; 62
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Logging_Save_Log>
		
		Buttons_Watch_for_Event(&Last_Button_Event);
     a4e:	8d e0       	ldi	r24, 0x0D	; 13
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 26 03 	call	0x64c	; 0x64c <Buttons_Watch_for_Event>
		
		Converter_Modify_State(&Last_Button_Event, &Converter_User_Required_State, &Current_Scan_Data);
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	51 e0       	ldi	r21, 0x01	; 1
     a5a:	61 e4       	ldi	r22, 0x41	; 65
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	8d e0       	ldi	r24, 0x0D	; 13
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 2b 08 	call	0x1056	; 0x1056 <Converter_Modify_State>

		Display_P_I_V_Conv_State(&Current_Analog_Data, Current_Logging_Data.Peak_PV_P, Converter_Get_State(),OCR0B, Converter_User_Required_State);
     a66:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <Converter_User_Required_State>
     a6a:	c8 b5       	in	r28, 0x28	; 40
     a6c:	0e 94 26 07 	call	0xe4c	; 0xe4c <Converter_Get_State>
     a70:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Current_Logging_Data>
     a74:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <Current_Logging_Data+0x1>
     a78:	2c 2f       	mov	r18, r28
     a7a:	48 2f       	mov	r20, r24
     a7c:	86 e1       	ldi	r24, 0x16	; 22
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 38 03 	call	0x670	; 0x670 <Display_P_I_V_Conv_State>
     a84:	8f e4       	ldi	r24, 0x4F	; 79
     a86:	93 ec       	ldi	r25, 0xC3	; 195
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <main+0x7c>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <main+0x82>
     a8e:	00 00       	nop
     a90:	da cf       	rjmp	.-76     	; 0xa46 <main+0x3a>

00000a92 <__vector_11>:
		
		_delay_ms(10);
    }
}

ISR(TIMER2_OVF_vect, ISR_NOBLOCK){	/* Nested interrupts. Runs at 76.2939 Hz */
     a92:	78 94       	sei
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	5f 93       	push	r21
     aa6:	6f 93       	push	r22
     aa8:	7f 93       	push	r23
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
	
	ADC_Get_Analog_Data(&Current_Analog_Data, &Battery_Voltage_Limits); /* Refresh analog data*/
     ab6:	6e e0       	ldi	r22, 0x0E	; 14
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	86 e1       	ldi	r24, 0x16	; 22
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 92 01 	call	0x324	; 0x324 <ADC_Get_Analog_Data>
	
	Analog_Calc_Avg(&Current_Analog_Data);	
     ac2:	86 e1       	ldi	r24, 0x16	; 22
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 14 02 	call	0x428	; 0x428 <Analog_Calc_Avg>
	
	Logging_Monitor_Values(&Current_Analog_Data, &Current_Logging_Data);
     aca:	6e e3       	ldi	r22, 0x3E	; 62
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	86 e1       	ldi	r24, 0x16	; 22
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 c2 04 	call	0x984	; 0x984 <Logging_Monitor_Values>
	
	Converter_Main(&Converter_User_Required_State, &Current_Analog_Data, &Current_Scan_Data);
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	51 e0       	ldi	r21, 0x01	; 1
     ada:	66 e1       	ldi	r22, 0x16	; 22
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	81 e4       	ldi	r24, 0x41	; 65
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Converter_Main>
	
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <glcd_WaitForStatus>:
	temp = glcd_ReadData(x, y/8);
	if(colour)
	glcd_WriteData_XY(x, y/8, temp | (1 << (y % 8)));
	else
	glcd_WriteData_XY(x, y/8, temp & ~(1 << (y % 8)));
}
     b08:	95 b1       	in	r25, 0x05	; 5
     b0a:	9b 7f       	andi	r25, 0xFB	; 251
     b0c:	95 b9       	out	0x05, r25	; 5
     b0e:	17 b8       	out	0x07, r1	; 7
     b10:	95 b1       	in	r25, 0x05	; 5
     b12:	92 60       	ori	r25, 0x02	; 2
     b14:	95 b9       	out	0x05, r25	; 5
     b16:	61 11       	cpse	r22, r1
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <glcd_WaitForStatus+0x1a>
     b1a:	9b b1       	in	r25, 0x0b	; 11
     b1c:	9f 7d       	andi	r25, 0xDF	; 223
     b1e:	9b b9       	out	0x0b, r25	; 11
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <glcd_WaitForStatus+0x20>
     b22:	9b b1       	in	r25, 0x0b	; 11
     b24:	9f 7b       	andi	r25, 0xBF	; 191
     b26:	9b b9       	out	0x0b, r25	; 11
     b28:	95 b1       	in	r25, 0x05	; 5
     b2a:	91 60       	ori	r25, 0x01	; 1
     b2c:	95 b9       	out	0x05, r25	; 5
     b2e:	95 b1       	in	r25, 0x05	; 5
     b30:	9b 7f       	andi	r25, 0xFB	; 251
     b32:	95 b9       	out	0x05, r25	; 5
     b34:	96 b1       	in	r25, 0x06	; 6
     b36:	25 b1       	in	r18, 0x05	; 5
     b38:	2e 7f       	andi	r18, 0xFE	; 254
     b3a:	25 b9       	out	0x05, r18	; 5
     b3c:	2b b1       	in	r18, 0x0b	; 11
     b3e:	20 66       	ori	r18, 0x60	; 96
     b40:	2b b9       	out	0x0b, r18	; 11
     b42:	98 23       	and	r25, r24
     b44:	41 f7       	brne	.-48     	; 0xb16 <glcd_WaitForStatus+0xe>
     b46:	85 b1       	in	r24, 0x05	; 5
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	85 b9       	out	0x05, r24	; 5
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	87 b9       	out	0x07, r24	; 7
     b50:	08 95       	ret

00000b52 <glcd_WriteCommand>:
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	d8 2f       	mov	r29, r24
     b58:	c6 2f       	mov	r28, r22
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	0e 94 84 05 	call	0xb08	; 0xb08 <glcd_WaitForStatus>
     b60:	85 b1       	in	r24, 0x05	; 5
     b62:	8b 7f       	andi	r24, 0xFB	; 251
     b64:	85 b9       	out	0x05, r24	; 5
     b66:	d8 b9       	out	0x08, r29	; 8
     b68:	85 b1       	in	r24, 0x05	; 5
     b6a:	8d 7f       	andi	r24, 0xFD	; 253
     b6c:	85 b9       	out	0x05, r24	; 5
     b6e:	c1 11       	cpse	r28, r1
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <glcd_WriteCommand+0x28>
     b72:	8b b1       	in	r24, 0x0b	; 11
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8b b9       	out	0x0b, r24	; 11
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <glcd_WriteCommand+0x2e>
     b7a:	8b b1       	in	r24, 0x0b	; 11
     b7c:	8f 7b       	andi	r24, 0xBF	; 191
     b7e:	8b b9       	out	0x0b, r24	; 11
     b80:	85 b1       	in	r24, 0x05	; 5
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	85 b9       	out	0x05, r24	; 5
     b86:	85 b1       	in	r24, 0x05	; 5
     b88:	8b 7f       	andi	r24, 0xFB	; 251
     b8a:	85 b9       	out	0x05, r24	; 5
     b8c:	85 b1       	in	r24, 0x05	; 5
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	85 b9       	out	0x05, r24	; 5
     b92:	8b b1       	in	r24, 0x0b	; 11
     b94:	80 66       	ori	r24, 0x60	; 96
     b96:	8b b9       	out	0x0b, r24	; 11
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <glcd_goto>:
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	c8 2f       	mov	r28, r24
     ba4:	d6 2f       	mov	r29, r22
     ba6:	8d 33       	cpi	r24, 0x3D	; 61
     ba8:	70 f4       	brcc	.+28     	; 0xbc6 <glcd_goto+0x28>
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	0e 94 84 05 	call	0xb08	; 0xb08 <glcd_WaitForStatus>
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	8c 2f       	mov	r24, r28
     bb6:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	8d 2f       	mov	r24, r29
     bbe:	88 6b       	ori	r24, 0xB8	; 184
     bc0:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <glcd_goto+0x44>
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	80 e8       	ldi	r24, 0x80	; 128
     bca:	0e 94 84 05 	call	0xb08	; 0xb08 <glcd_WaitForStatus>
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	83 ec       	ldi	r24, 0xC3	; 195
     bd2:	8c 0f       	add	r24, r28
     bd4:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	8d 2f       	mov	r24, r29
     bdc:	88 6b       	ori	r24, 0xB8	; 184
     bde:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <glcd_WriteData_XY>:
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	c8 2f       	mov	r28, r24
     bee:	d4 2f       	mov	r29, r20
     bf0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <glcd_goto>
     bf4:	85 b1       	in	r24, 0x05	; 5
     bf6:	84 60       	ori	r24, 0x04	; 4
     bf8:	85 b9       	out	0x05, r24	; 5
     bfa:	85 b1       	in	r24, 0x05	; 5
     bfc:	8d 7f       	andi	r24, 0xFD	; 253
     bfe:	85 b9       	out	0x05, r24	; 5
     c00:	d8 b9       	out	0x08, r29	; 8
     c02:	cd 33       	cpi	r28, 0x3D	; 61
     c04:	20 f4       	brcc	.+8      	; 0xc0e <glcd_WriteData_XY+0x26>
     c06:	8b b1       	in	r24, 0x0b	; 11
     c08:	8f 7d       	andi	r24, 0xDF	; 223
     c0a:	8b b9       	out	0x0b, r24	; 11
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <glcd_WriteData_XY+0x2c>
     c0e:	8b b1       	in	r24, 0x0b	; 11
     c10:	8f 7b       	andi	r24, 0xBF	; 191
     c12:	8b b9       	out	0x0b, r24	; 11
     c14:	85 b1       	in	r24, 0x05	; 5
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	85 b9       	out	0x05, r24	; 5
     c1a:	85 b1       	in	r24, 0x05	; 5
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	85 b9       	out	0x05, r24	; 5
     c20:	85 b1       	in	r24, 0x05	; 5
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	85 b9       	out	0x05, r24	; 5
     c26:	8b b1       	in	r24, 0x0b	; 11
     c28:	80 66       	ori	r24, 0x60	; 96
     c2a:	8b b9       	out	0x0b, r24	; 11
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <glcd_fillScreen>:
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	88 23       	and	r24, r24
     c3a:	11 f0       	breq	.+4      	; 0xc40 <glcd_fillScreen+0xe>
     c3c:	1f ef       	ldi	r17, 0xFF	; 255
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <glcd_fillScreen+0x10>
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	d0 e0       	ldi	r29, 0x00	; 0
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <glcd_fillScreen+0x2a>
     c46:	41 2f       	mov	r20, r17
     c48:	6d 2f       	mov	r22, r29
     c4a:	8c 2f       	mov	r24, r28
     c4c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <glcd_WriteData_XY>
     c50:	cf 5f       	subi	r28, 0xFF	; 255
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <glcd_fillScreen+0x24>
     c54:	c0 e0       	ldi	r28, 0x00	; 0
     c56:	ca 37       	cpi	r28, 0x7A	; 122
     c58:	b0 f3       	brcs	.-20     	; 0xc46 <glcd_fillScreen+0x14>
     c5a:	df 5f       	subi	r29, 0xFF	; 255
     c5c:	d4 30       	cpi	r29, 0x04	; 4
     c5e:	d0 f3       	brcs	.-12     	; 0xc54 <glcd_fillScreen+0x22>
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	08 95       	ret

00000c68 <glcd_init>:
//-------------------------------------------------------------------------------------------------
// Initialise the display
// Only needs to be called once at the start of the program
//-------------------------------------------------------------------------------------------------
void glcd_init(void)
{
     c68:	cf 93       	push	r28
	
	SED1520_CLK_DDR |= SED1520_CLK_PIN; /* Set the clock pin as output. MAKE SURE TIMER2 IS INITIALIZED! */
     c6a:	8a b1       	in	r24, 0x0a	; 10
     c6c:	80 61       	ori	r24, 0x10	; 16
     c6e:	8a b9       	out	0x0a, r24	; 10

	SED1520_DATA_DDR = 0xFF; /* Set the data port as output */
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	87 b9       	out	0x07, r24	; 7

	SED1520_CONTROL_CS_DDR |= (SED1520_CS2 | SED1520_CS1);
     c74:	8a b1       	in	r24, 0x0a	; 10
     c76:	80 66       	ori	r24, 0x60	; 96
     c78:	8a b9       	out	0x0a, r24	; 10
	SED1520_CONTROL_RESET_DDR |= SED1520_RES;
     c7a:	81 b1       	in	r24, 0x01	; 1
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	81 b9       	out	0x01, r24	; 1
	SED1520_CONTROL_OTHER_DDR |= (SED1520_E | SED1520_RW | SED1520_A0);
     c80:	84 b1       	in	r24, 0x04	; 4
     c82:	87 60       	ori	r24, 0x07	; 7
     c84:	84 b9       	out	0x04, r24	; 4
     c86:	8f e4       	ldi	r24, 0x4F	; 79
     c88:	93 ec       	ldi	r25, 0xC3	; 195
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <glcd_init+0x22>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <glcd_init+0x28>
     c90:	00 00       	nop
	
	// Do the reset for 68 family mode
	
	_delay_ms(10);
	SED1520_CONTROL_RESET_PORT &= ~SED1520_RES;
     c92:	82 b1       	in	r24, 0x02	; 2
     c94:	8e 7f       	andi	r24, 0xFE	; 254
     c96:	82 b9       	out	0x02, r24	; 2
     c98:	8f e4       	ldi	r24, 0x4F	; 79
     c9a:	93 ec       	ldi	r25, 0xC3	; 195
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <glcd_init+0x34>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <glcd_init+0x3a>
     ca2:	00 00       	nop
	_delay_ms(10);
	SED1520_CONTROL_RESET_PORT |= SED1520_RES;
     ca4:	82 b1       	in	r24, 0x02	; 2
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	82 b9       	out	0x02, r24	; 2
	
	
	uint8_t chip;
	for(chip = 0; chip < 2; chip++) {
     caa:	c0 e0       	ldi	r28, 0x00	; 0
     cac:	21 c0       	rjmp	.+66     	; 0xcf0 <glcd_init+0x88>
		// Setup the chip.  Most commands are not required but are included in case a future version of
		// the LCD will have different defaults.  The only command that is mandatory is DISPLAY_ON.
		glcd_WriteCommand(RESET, chip);
     cae:	6c 2f       	mov	r22, r28
     cb0:	82 ee       	ldi	r24, 0xE2	; 226
     cb2:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
		glcd_WaitForStatus(0x10, chip);
     cb6:	6c 2f       	mov	r22, r28
     cb8:	80 e1       	ldi	r24, 0x10	; 16
     cba:	0e 94 84 05 	call	0xb08	; 0xb08 <glcd_WaitForStatus>
		glcd_WriteCommand(ADC_CLOCKWISE, chip);
     cbe:	6c 2f       	mov	r22, r28
     cc0:	80 ea       	ldi	r24, 0xA0	; 160
     cc2:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
		glcd_WriteCommand(STATIC_DRIVE_OFF, chip);
     cc6:	6c 2f       	mov	r22, r28
     cc8:	84 ea       	ldi	r24, 0xA4	; 164
     cca:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
		glcd_WriteCommand(END_READ_MODIFY, chip);
     cce:	6c 2f       	mov	r22, r28
     cd0:	8e ee       	ldi	r24, 0xEE	; 238
     cd2:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
		glcd_WriteCommand(DUTY_RATIO_32, chip);
     cd6:	6c 2f       	mov	r22, r28
     cd8:	89 ea       	ldi	r24, 0xA9	; 169
     cda:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
		glcd_WriteCommand(DISPLAY_ON, chip);                // mandatory
     cde:	6c 2f       	mov	r22, r28
     ce0:	8f ea       	ldi	r24, 0xAF	; 175
     ce2:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
		glcd_WriteCommand(DISPLAY_START_LINE | 0, chip);
     ce6:	6c 2f       	mov	r22, r28
     ce8:	80 ec       	ldi	r24, 0xC0	; 192
     cea:	0e 94 a9 05 	call	0xb52	; 0xb52 <glcd_WriteCommand>
	_delay_ms(10);
	SED1520_CONTROL_RESET_PORT |= SED1520_RES;
	
	
	uint8_t chip;
	for(chip = 0; chip < 2; chip++) {
     cee:	cf 5f       	subi	r28, 0xFF	; 255
     cf0:	c2 30       	cpi	r28, 0x02	; 2
     cf2:	e8 f2       	brcs	.-70     	; 0xcae <glcd_init+0x46>
		glcd_WriteCommand(END_READ_MODIFY, chip);
		glcd_WriteCommand(DUTY_RATIO_32, chip);
		glcd_WriteCommand(DISPLAY_ON, chip);                // mandatory
		glcd_WriteCommand(DISPLAY_START_LINE | 0, chip);
	}
	glcd_fillScreen(0);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 19 06 	call	0xc32	; 0xc32 <glcd_fillScreen>
}
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <glcd_WriteChar>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------

void glcd_WriteChar(uint8_t* x_pos, uint8_t* y_pos, char character)
{
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	ec 01       	movw	r28, r24
     d0c:	8b 01       	movw	r16, r22
	uint8_t i;
	character -= 32;
     d0e:	0f 2e       	mov	r0, r31
     d10:	f0 ee       	ldi	r31, 0xE0	; 224
     d12:	ef 2e       	mov	r14, r31
     d14:	f0 2d       	mov	r31, r0
     d16:	e4 0e       	add	r14, r20
	for(i = 0; i < 5; i++) {
     d18:	f1 2c       	mov	r15, r1
     d1a:	17 c0       	rjmp	.+46     	; 0xd4a <glcd_WriteChar+0x4c>
		glcd_WriteData_XY(*x_pos, *y_pos, pgm_read_byte(&font5x7[(5 * character) + i]));
     d1c:	8e 2d       	mov	r24, r14
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	fc 01       	movw	r30, r24
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	e8 0f       	add	r30, r24
     d2c:	f9 1f       	adc	r31, r25
     d2e:	ef 0d       	add	r30, r15
     d30:	f1 1d       	adc	r31, r1
     d32:	e9 51       	subi	r30, 0x19	; 25
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	44 91       	lpm	r20, Z
     d38:	f8 01       	movw	r30, r16
     d3a:	60 81       	ld	r22, Z
     d3c:	88 81       	ld	r24, Y
     d3e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <glcd_WriteData_XY>
		(*x_pos)++;
     d42:	88 81       	ld	r24, Y
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	88 83       	st	Y, r24

void glcd_WriteChar(uint8_t* x_pos, uint8_t* y_pos, char character)
{
	uint8_t i;
	character -= 32;
	for(i = 0; i < 5; i++) {
     d48:	f3 94       	inc	r15
     d4a:	f4 e0       	ldi	r31, 0x04	; 4
     d4c:	ff 15       	cp	r31, r15
     d4e:	30 f7       	brcc	.-52     	; 0xd1c <glcd_WriteChar+0x1e>
		glcd_WriteData_XY(*x_pos, *y_pos, pgm_read_byte(&font5x7[(5 * character) + i]));
		(*x_pos)++;
	}
	glcd_WriteData_XY(*x_pos, *y_pos,0x00);
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	f8 01       	movw	r30, r16
     d54:	60 81       	ld	r22, Z
     d56:	88 81       	ld	r24, Y
     d58:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <glcd_WriteData_XY>
	(*x_pos)++;
     d5c:	88 81       	ld	r24, Y
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	88 83       	st	Y, r24
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <glcd_WriteString>:

//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void glcd_WriteString(uint8_t* x_pos, uint8_t* y_pos, char* string)
{
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	7c 01       	movw	r14, r24
     d7e:	8b 01       	movw	r16, r22
     d80:	ea 01       	movw	r28, r20
	while(*string)
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <glcd_WriteString+0x1e>
	{
		glcd_WriteChar(x_pos, y_pos,*string++);
     d84:	21 96       	adiw	r28, 0x01	; 1
     d86:	b8 01       	movw	r22, r16
     d88:	c7 01       	movw	r24, r14
     d8a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <glcd_WriteChar>
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void glcd_WriteString(uint8_t* x_pos, uint8_t* y_pos, char* string)
{
	while(*string)
     d8e:	48 81       	ld	r20, Y
     d90:	41 11       	cpse	r20, r1
     d92:	f8 cf       	rjmp	.-16     	; 0xd84 <glcd_WriteString+0x14>
	{
		glcd_WriteChar(x_pos, y_pos,*string++);
	}
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	08 95       	ret

00000da2 <glcd_WriteString_P>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void glcd_WriteString_P(uint8_t* x_pos, uint8_t* y_pos, const char * string)
{
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	7c 01       	movw	r14, r24
     db0:	8b 01       	movw	r16, r22
     db2:	ea 01       	movw	r28, r20
	while(pgm_read_byte(string))
     db4:	07 c0       	rjmp	.+14     	; 0xdc4 <glcd_WriteString_P+0x22>
	{
		glcd_WriteChar(x_pos, y_pos, pgm_read_byte(string++));
     db6:	21 96       	adiw	r28, 0x01	; 1
     db8:	fa 01       	movw	r30, r20
     dba:	44 91       	lpm	r20, Z
     dbc:	b8 01       	movw	r22, r16
     dbe:	c7 01       	movw	r24, r14
     dc0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <glcd_WriteChar>
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void glcd_WriteString_P(uint8_t* x_pos, uint8_t* y_pos, const char * string)
{
	while(pgm_read_byte(string))
     dc4:	ae 01       	movw	r20, r28
     dc6:	fe 01       	movw	r30, r28
     dc8:	84 91       	lpm	r24, Z
     dca:	81 11       	cpse	r24, r1
     dcc:	f4 cf       	rjmp	.-24     	; 0xdb6 <glcd_WriteString_P+0x14>
	{
		glcd_WriteChar(x_pos, y_pos, pgm_read_byte(string++));
	}
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <Timers_Init>:
void Timers_Init(void){
	
	
	/* Initialize Timer 1 at 2 kHz */
	/* Timer 1 is used for: LCD clock signal */
	TCCR1A |= (1 << COM1B1 | (1 << WGM11));	/* Fast PWM, Clear on compare match (non inverting mode) */
     ddc:	e0 e8       	ldi	r30, 0x80	; 128
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	82 62       	ori	r24, 0x22	; 34
     de4:	80 83       	st	Z, r24
	TCCR1B |= ((1 << CS10) | (1 << WGM13) | (1 << WGM12));		/* ClockI/O selected, Prescaler = 1, Fast PWM, TOP = ICR1 */
     de6:	e1 e8       	ldi	r30, 0x81	; 129
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	89 61       	ori	r24, 0x19	; 25
     dee:	80 83       	st	Z, r24
	ICR1 = 10000;				/* TOP = 10000; 20 MHz / 2kHz = 10000; */
     df0:	80 e1       	ldi	r24, 0x10	; 16
     df2:	97 e2       	ldi	r25, 0x27	; 39
     df4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f0087>
     df8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f0086>
	OCR1B = 5000;				/* 50% Duty Cycle -> 10000/2 = 5000 */
     dfc:	88 e8       	ldi	r24, 0x88	; 136
     dfe:	93 e1       	ldi	r25, 0x13	; 19
     e00:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f008b>
     e04:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f008a>
	
	
	/* Initialize Timer 2 at 76.2939 Hz */
	/* Timer 2 is used for: LCD backlight PWM */
	TCCR2A |= ((1 << COM2A1) | (1 << COM2A0) | (1 << WGM21) | (1 << WGM20));	/* Fast PWM, inverting mode because the LEDs are ON when the pin is LOW */
     e08:	e0 eb       	ldi	r30, 0xB0	; 176
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	83 6c       	ori	r24, 0xC3	; 195
     e10:	80 83       	st	Z, r24
	TCCR2B |= ((1 << CS22)|(1 << CS21)|(1 << CS20));	/* Prescaler = 256, 20 MHz/(256 * 1024) = 76.2939 Hz */
     e12:	e1 eb       	ldi	r30, 0xB1	; 177
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	87 60       	ori	r24, 0x07	; 7
     e1a:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);	/* Timer overflow overflow interrupt enable */
     e1c:	e0 e7       	ldi	r30, 0x70	; 112
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	80 83       	st	Z, r24
	
	/* Initialize Timer 0 at 200 kHz */
	TCCR0A |= (1 << COM0B1 | (1 << WGM01) | (1 << WGM00));	/* Fast PWM, Clear on compare match (non-inverting) */
     e26:	84 b5       	in	r24, 0x24	; 36
     e28:	83 62       	ori	r24, 0x23	; 35
     e2a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= ((1 << WGM02) | (1 << CS00) );		/* Prescaler = 1, TOP = OCR1A */
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	89 60       	ori	r24, 0x09	; 9
     e30:	85 bd       	out	0x25, r24	; 37
	OCR0A = TIMER_0_TOP;		/* 20 MHz / 200 kHz = 100; */
     e32:	84 e6       	ldi	r24, 0x64	; 100
     e34:	87 bd       	out	0x27, r24	; 39
	OCR0B = TIMER_0_TOP/2; /* 50% duty cycle for starting */
     e36:	82 e3       	ldi	r24, 0x32	; 50
     e38:	88 bd       	out	0x28, r24	; 40
     e3a:	08 95       	ret

00000e3c <Converter_Enable>:
}


void Converter_Enable(void){
	
	CONVERTER_DDR |= (1 << CONVERTER_OUT_PIN); /* Set corresponding DDR bit */
     e3c:	84 b1       	in	r24, 0x04	; 4
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	84 b9       	out	0x04, r24	; 4
     e42:	08 95       	ret

00000e44 <Converter_Disable>:
	
}

void Converter_Disable(void){
	 
	 CONVERTER_DDR &= ~(1 << CONVERTER_OUT_PIN); /* Clear corresponding DDR bit */
     e44:	84 b1       	in	r24, 0x04	; 4
     e46:	8f 7e       	andi	r24, 0xEF	; 239
     e48:	84 b9       	out	0x04, r24	; 4
     e4a:	08 95       	ret

00000e4c <Converter_Get_State>:
	
	uint8_t temp = CONVERTER_DDR;
	
	temp &= (1 << CONVERTER_OUT_PIN);
	
	return (bool)temp;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	24 9b       	sbis	0x04, 4	; 4
     e50:	80 e0       	ldi	r24, 0x00	; 0
	
}
     e52:	08 95       	ret

00000e54 <Converter_Update_Duty_Cycle>:
void Converter_Update_Duty_Cycle(volatile Analog_Data_t* Analog_Data){
	
	static int8_t Duty_Cycle_Increment = 1; /* Variable storing the direction of increment / decrement*/
	static int16_t Previous_PV_P; /* Stores the previous power figure to check if the duty cycle change has increased of decreased the power*/
	
	if (Analog_Data->PV_P < Previous_PV_P){ /* If the new power is lower than the previous power */
     e54:	fc 01       	movw	r30, r24
     e56:	44 81       	ldd	r20, Z+4	; 0x04
     e58:	55 81       	ldd	r21, Z+5	; 0x05
     e5a:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <Previous_PV_P.1741>
     e5e:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <Previous_PV_P.1741+0x1>
     e62:	42 17       	cp	r20, r18
     e64:	53 07       	cpc	r21, r19
     e66:	2c f4       	brge	.+10     	; 0xe72 <Converter_Update_Duty_Cycle+0x1e>
			
		Duty_Cycle_Increment *= -1;  /* change direction of increment*/
     e68:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <Duty_Cycle_Increment.1740>
     e6c:	21 95       	neg	r18
     e6e:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <Duty_Cycle_Increment.1740>
			
	}
		
	Previous_PV_P = Analog_Data->PV_P; /* Update the previous power for next time */
     e72:	fc 01       	movw	r30, r24
     e74:	84 81       	ldd	r24, Z+4	; 0x04
     e76:	95 81       	ldd	r25, Z+5	; 0x05
     e78:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <Previous_PV_P.1741+0x1>
     e7c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <Previous_PV_P.1741>
		
	/* special cases for upper and lower limits*/
		
	if (!(OCR0B)){ /* If OCR0B is equal to zero */
     e80:	88 b5       	in	r24, 0x28	; 40
     e82:	81 11       	cpse	r24, r1
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <Converter_Update_Duty_Cycle+0x3a>
			
		Duty_Cycle_Increment = 1; /* Increment is set to one to move away from zero*/
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Duty_Cycle_Increment.1740>
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <Converter_Update_Duty_Cycle+0x46>
	}
	else if (OCR0B >= (TIMER_0_TOP - 1)){ /* If OCR0B is at the maximum value */
     e8e:	88 b5       	in	r24, 0x28	; 40
     e90:	83 36       	cpi	r24, 0x63	; 99
     e92:	18 f0       	brcs	.+6      	; 0xe9a <Converter_Update_Duty_Cycle+0x46>
			
		Duty_Cycle_Increment = -1; /* Increment is set to minus one to move away from the top */
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Duty_Cycle_Increment.1740>
	}	
		
	OCR0B += Duty_Cycle_Increment; /* Apply the increment (increase or decrease duty cycle) */
     e9a:	98 b5       	in	r25, 0x28	; 40
     e9c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Duty_Cycle_Increment.1740>
     ea0:	89 0f       	add	r24, r25
     ea2:	88 bd       	out	0x28, r24	; 40
     ea4:	08 95       	ret

00000ea6 <Converter_Scan_Next_Point>:
bool Converter_Scan_Next_Point(volatile Analog_Data_t* Analog_Data, volatile Scan_Data_t* Scan_Data){
	
	/* Fonction qui mémorise le duty cycle où la puissance est la plus élevée*/

	
	if (Analog_Data->PV_P > Scan_Data->PP_Value){
     ea6:	fc 01       	movw	r30, r24
     ea8:	44 81       	ldd	r20, Z+4	; 0x04
     eaa:	55 81       	ldd	r21, Z+5	; 0x05
     eac:	fb 01       	movw	r30, r22
     eae:	25 81       	ldd	r18, Z+5	; 0x05
     eb0:	36 81       	ldd	r19, Z+6	; 0x06
     eb2:	24 17       	cp	r18, r20
     eb4:	35 07       	cpc	r19, r21
     eb6:	40 f4       	brcc	.+16     	; 0xec8 <Converter_Scan_Next_Point+0x22>
		
		Scan_Data->PP_Value = Analog_Data->PV_P;
     eb8:	fc 01       	movw	r30, r24
     eba:	84 81       	ldd	r24, Z+4	; 0x04
     ebc:	95 81       	ldd	r25, Z+5	; 0x05
     ebe:	fb 01       	movw	r30, r22
     ec0:	96 83       	std	Z+6, r25	; 0x06
     ec2:	85 83       	std	Z+5, r24	; 0x05
		Scan_Data->PP_DutyCycle = OCR0B;
     ec4:	88 b5       	in	r24, 0x28	; 40
     ec6:	84 83       	std	Z+4, r24	; 0x04
		
	}
	
	/*Retourne TRUE tant que le Duty cycle n'a pas atteint le max*/
	if (OCR0B < TIMER_0_TOP-1){
     ec8:	88 b5       	in	r24, 0x28	; 40
     eca:	83 36       	cpi	r24, 0x63	; 99
     ecc:	28 f4       	brcc	.+10     	; 0xed8 <Converter_Scan_Next_Point+0x32>
		OCR0B++;
     ece:	88 b5       	in	r24, 0x28	; 40
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	88 bd       	out	0x28, r24	; 40
		return true;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	08 95       	ret
	}else{
		return false;
     ed8:	80 e0       	ldi	r24, 0x00	; 0
	}

}
     eda:	08 95       	ret

00000edc <Converter_MPPT_Chase_Tick_Update>:
		
	}

}

void Converter_MPPT_Chase_Tick_Update(bool* MPPT_Chase_Tick){
     edc:	fc 01       	movw	r30, r24
	
	static uint8_t Update_Counter = MPPT_CHASE_DIVIDER;
	
	Update_Counter--; /* Decrement the divider counter */
     ede:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Update_Counter.1759>
     ee2:	91 50       	subi	r25, 0x01	; 1
     ee4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Update_Counter.1759>
	
	if (!Update_Counter){ /* If the counter has reached zero */
     ee8:	91 11       	cpse	r25, r1
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <Converter_MPPT_Chase_Tick_Update+0x1a>
		*MPPT_Chase_Tick = true;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 83       	st	Z, r24
		Update_Counter = MPPT_CHASE_DIVIDER;
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Update_Counter.1759>
     ef6:	08 95       	ret

00000ef8 <Converter_Scan_Tick_Update>:
	}
	
}

void Converter_Scan_Tick_Update(volatile Scan_Data_t* Scan_Data){
     ef8:	fc 01       	movw	r30, r24

	Scan_Data->Scan_Countdown--; /* Decrement the divider counter */
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	93 83       	std	Z+3, r25	; 0x03
     f02:	82 83       	std	Z+2, r24	; 0x02
		
	if (!Scan_Data->Scan_Countdown){ /* If the counter has reached zero */
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	89 2b       	or	r24, r25
     f0a:	31 f4       	brne	.+12     	; 0xf18 <Converter_Scan_Tick_Update+0x20>
		Scan_Data->Scan_Tick = true;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	81 83       	std	Z+1, r24	; 0x01
		Scan_Data->Scan_Countdown = SCAN_DIVIDER;
     f10:	80 e2       	ldi	r24, 0x20	; 32
     f12:	92 eb       	ldi	r25, 0xB2	; 178
     f14:	93 83       	std	Z+3, r25	; 0x03
     f16:	82 83       	std	Z+2, r24	; 0x02
     f18:	08 95       	ret

00000f1a <Converter_Start_Scan>:
	}
	
}

void Converter_Start_Scan(volatile Scan_Data_t* Scan_Data, volatile Converter_User_Required_State_t* Conv_User_State){
     f1a:	fc 01       	movw	r30, r24
	
		*Conv_User_State = SCAN;
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	db 01       	movw	r26, r22
     f20:	8c 93       	st	X, r24
		Scan_Data->Scan_Tick = false;
     f22:	11 82       	std	Z+1, r1	; 0x01
		Scan_Data->PP_DutyCycle = 0;
     f24:	14 82       	std	Z+4, r1	; 0x04
		Scan_Data->PP_Value = 0;
     f26:	16 82       	std	Z+6, r1	; 0x06
     f28:	15 82       	std	Z+5, r1	; 0x05
		OCR0B = 0;
     f2a:	18 bc       	out	0x28, r1	; 40
		Scan_Data->Scan_Pre_Delay = PRE_SCAN_DELAY;
     f2c:	8a e0       	ldi	r24, 0x0A	; 10
     f2e:	87 83       	std	Z+7, r24	; 0x07
		Scan_Data->Scan_Countdown = SCAN_DIVIDER;
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	92 eb       	ldi	r25, 0xB2	; 178
     f34:	93 83       	std	Z+3, r25	; 0x03
     f36:	82 83       	std	Z+2, r24	; 0x02
     f38:	08 95       	ret

00000f3a <Converter_Start_Auto>:
	
}

void Converter_Start_Auto(volatile Scan_Data_t* Scan_Data, volatile Converter_User_Required_State_t* Conv_User_State){
	
	*Conv_User_State = AUTO;/* Retour au mode AUTO */
     f3a:	22 e0       	ldi	r18, 0x02	; 2
     f3c:	fb 01       	movw	r30, r22
     f3e:	20 83       	st	Z, r18
	OCR0B = Scan_Data->PP_DutyCycle; /* On met le convertisseur où la puissance est la plus élevée*/
     f40:	fc 01       	movw	r30, r24
     f42:	24 81       	ldd	r18, Z+4	; 0x04
     f44:	28 bd       	out	0x28, r18	; 40
	Scan_Data->Scan_Post_Delay = POST_SCAN_DELAY;
     f46:	2a e0       	ldi	r18, 0x0A	; 10
     f48:	20 87       	std	Z+8, r18	; 0x08
     f4a:	08 95       	ret

00000f4c <Converter_Main>:
	
	/* DDR bit must be set for the pin to output a square wave! */
	
}

void Converter_Main(volatile Converter_User_Required_State_t* Converter_User_Req, volatile Analog_Data_t* Analog_Data, volatile Scan_Data_t* Scan_Data){ /* Runs at 76.2939 Hz */
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	ec 01       	movw	r28, r24
     f5a:	8b 01       	movw	r16, r22
     f5c:	7a 01       	movw	r14, r20
	
	static bool Converter_Run;

	if (*Converter_User_Req == ON || *Converter_User_Req == SCAN){ /* Determine the value of Converter_Run */
     f5e:	88 81       	ld	r24, Y
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	19 f0       	breq	.+6      	; 0xf6a <Converter_Main+0x1e>
     f64:	88 81       	ld	r24, Y
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	21 f4       	brne	.+8      	; 0xf72 <Converter_Main+0x26>
		
		Converter_Run = true;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Converter_Run.1726>
     f70:	3b c0       	rjmp	.+118    	; 0xfe8 <Converter_Main+0x9c>
	}
	else if (*Converter_User_Req == OFF){
     f72:	88 81       	ld	r24, Y
     f74:	81 11       	cpse	r24, r1
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <Converter_Main+0x32>
		
		Converter_Run = false;
     f78:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <Converter_Run.1726>
     f7c:	35 c0       	rjmp	.+106    	; 0xfe8 <Converter_Main+0x9c>
	}
	else if (*Converter_User_Req == AUTO){ /* If the user wants automatic operation*/
     f7e:	88 81       	ld	r24, Y
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	91 f5       	brne	.+100    	; 0xfe8 <Converter_Main+0x9c>
	
		if (Scan_Data->Scan_Post_Delay){
     f84:	fa 01       	movw	r30, r20
     f86:	80 85       	ldd	r24, Z+8	; 0x08
     f88:	88 23       	and	r24, r24
     f8a:	21 f0       	breq	.+8      	; 0xf94 <Converter_Main+0x48>
			
			Scan_Data->Scan_Post_Delay--;
     f8c:	80 85       	ldd	r24, Z+8	; 0x08
     f8e:	81 50       	subi	r24, 0x01	; 1
     f90:	80 87       	std	Z+8, r24	; 0x08
     f92:	0b c0       	rjmp	.+22     	; 0xfaa <Converter_Main+0x5e>
			
		}else if (Converter_Get_State() && (Analog_Data->PV_P < MIN_RUN_POWER)){
     f94:	0e 94 26 07 	call	0xe4c	; 0xe4c <Converter_Get_State>
     f98:	88 23       	and	r24, r24
     f9a:	39 f0       	breq	.+14     	; 0xfaa <Converter_Main+0x5e>
     f9c:	f8 01       	movw	r30, r16
     f9e:	84 81       	ldd	r24, Z+4	; 0x04
     fa0:	95 81       	ldd	r25, Z+5	; 0x05
     fa2:	49 97       	sbiw	r24, 0x19	; 25
     fa4:	14 f4       	brge	.+4      	; 0xfaa <Converter_Main+0x5e>
				
			Converter_Run = false;
     fa6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <Converter_Run.1726>
		}
			
		if (!Converter_Get_State() && (Analog_Data->PV_V > OPEN_CIRCUIT_VOLTAGE_TURN_ON_THRESHOLD)){
     faa:	0e 94 26 07 	call	0xe4c	; 0xe4c <Converter_Get_State>
     fae:	81 11       	cpse	r24, r1
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <Converter_Main+0x78>
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	89 31       	cpi	r24, 0x19	; 25
     fba:	97 44       	sbci	r25, 0x47	; 71
     fbc:	1c f0       	brlt	.+6      	; 0xfc4 <Converter_Main+0x78>
				
			Converter_Run = true;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Converter_Run.1726>
			//Converter_Start_Scan(Scan_Data, Converter_User_Req);
		}
		
		Converter_Scan_Tick_Update(Scan_Data);
     fc4:	c7 01       	movw	r24, r14
     fc6:	0e 94 7c 07 	call	0xef8	; 0xef8 <Converter_Scan_Tick_Update>
			
		if (Converter_Get_State()){ /* Si on est en mode Auto et que le convertisseur est actif*/
     fca:	0e 94 26 07 	call	0xe4c	; 0xe4c <Converter_Get_State>
     fce:	88 23       	and	r24, r24
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <Converter_Main+0x9c>
			
			if (Scan_Data->Scan_Tick && Scan_Data->Enable_Scan){
     fd2:	f7 01       	movw	r30, r14
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
     fd6:	88 23       	and	r24, r24
     fd8:	39 f0       	breq	.+14     	; 0xfe8 <Converter_Main+0x9c>
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	21 f0       	breq	.+8      	; 0xfe8 <Converter_Main+0x9c>
						
				Converter_Start_Scan(Scan_Data, Converter_User_Req);
     fe0:	be 01       	movw	r22, r28
     fe2:	c7 01       	movw	r24, r14
     fe4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <Converter_Start_Scan>
			
	}


	static bool MPPT_Chase_Tick = 0;
	Converter_MPPT_Chase_Tick_Update(&MPPT_Chase_Tick);
     fe8:	8c e3       	ldi	r24, 0x3C	; 60
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 6e 07 	call	0xedc	; 0xedc <Converter_MPPT_Chase_Tick_Update>
		


	if (!Analog_Data->Batt_OV && Converter_Run){	/* If the battery is not in overvoltage and the converter can run*/
     ff0:	f8 01       	movw	r30, r16
     ff2:	80 89       	ldd	r24, Z+16	; 0x10
     ff4:	81 11       	cpse	r24, r1
     ff6:	26 c0       	rjmp	.+76     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
     ff8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Converter_Run.1726>
     ffc:	88 23       	and	r24, r24
     ffe:	11 f1       	breq	.+68     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
			
		Converter_Enable(); /* Turn on the converter*/
    1000:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Converter_Enable>
			
			
		if (MPPT_Chase_Tick){ /* If the counter has reached zero */
    1004:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MPPT_Chase_Tick.1727>
    1008:	88 23       	and	r24, r24
    100a:	f1 f0       	breq	.+60     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
				MPPT_Chase_Tick = false;
    100c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MPPT_Chase_Tick.1727>
				
				
			if (*Converter_User_Req == SCAN){/* If SCAN, do the scan, else do the MPPT chase/update duty cycle thing */
    1010:	88 81       	ld	r24, Y
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	99 f4       	brne	.+38     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
				
				if (Scan_Data->Scan_Pre_Delay){
    1016:	f7 01       	movw	r30, r14
    1018:	87 81       	ldd	r24, Z+7	; 0x07
    101a:	88 23       	and	r24, r24
    101c:	21 f0       	breq	.+8      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
					Scan_Data->Scan_Pre_Delay--;
    101e:	87 81       	ldd	r24, Z+7	; 0x07
    1020:	81 50       	subi	r24, 0x01	; 1
    1022:	87 83       	std	Z+7, r24	; 0x07
    1024:	11 c0       	rjmp	.+34     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
					
				}else{
					if (!Converter_Scan_Next_Point(Analog_Data,Scan_Data)){/* La fct. Scan_Next_Point retourne vrai tant qu'il reste des points à scanner*/
    1026:	b7 01       	movw	r22, r14
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 53 07 	call	0xea6	; 0xea6 <Converter_Scan_Next_Point>
    102e:	81 11       	cpse	r24, r1
    1030:	0b c0       	rjmp	.+22     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
						/*Donc, si il ne reste plus de points à scanner, on fait les choses suivantes:*/
						Converter_Start_Auto(Scan_Data, Converter_User_Req);
    1032:	be 01       	movw	r22, r28
    1034:	c7 01       	movw	r24, r14
    1036:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Converter_Start_Auto>
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
				}
				
				/* Set mode back to AUTO after SCAN is finished */
				/* SCAN needs to be paced by MPPT_Chase_Tick */
			}else{
				Converter_Update_Duty_Cycle(Analog_Data); /* Update the converter */
    103c:	c8 01       	movw	r24, r16
    103e:	0e 94 2a 07 	call	0xe54	; 0xe54 <Converter_Update_Duty_Cycle>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		}
			
			
	} else {
			
		Converter_Disable(); /* Turn off the converter */
    1044:	0e 94 22 07 	call	0xe44	; 0xe44 <Converter_Disable>
			
	}

}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	08 95       	ret

00001056 <Converter_Modify_State>:
		return false;
	}

}

void Converter_Modify_State(volatile Button_Event_t* Button_Event, volatile Converter_User_Required_State_t* Conv_User_State, volatile Scan_Data_t* Scan_Data){
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
	
	//static bool Button_Released_Flag;
	
	switch(*Button_Event) {
    105a:	fc 01       	movw	r30, r24
    105c:	20 81       	ld	r18, Z
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	09 f1       	breq	.+66     	; 0x10a4 <Converter_Modify_State+0x4e>
    1062:	23 30       	cpi	r18, 0x03	; 3
    1064:	19 f0       	breq	.+6      	; 0x106c <Converter_Modify_State+0x16>
    1066:	21 30       	cpi	r18, 0x01	; 1
    1068:	71 f5       	brne	.+92     	; 0x10c6 <Converter_Modify_State+0x70>
    106a:	25 c0       	rjmp	.+74     	; 0x10b6 <Converter_Modify_State+0x60>
    106c:	fb 01       	movw	r30, r22
    106e:	ec 01       	movw	r28, r24
		
		case BUTTON_PRESS_1_AND_2: /* If event 0, toggle user required converter state*/
		if (*Conv_User_State == OFF){
    1070:	80 81       	ld	r24, Z
    1072:	81 11       	cpse	r24, r1
    1074:	04 c0       	rjmp	.+8      	; 0x107e <Converter_Modify_State+0x28>
			Converter_Start_Scan(Scan_Data, Conv_User_State);
    1076:	ca 01       	movw	r24, r20
    1078:	0e 94 8d 07 	call	0xf1a	; 0xf1a <Converter_Start_Scan>
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <Converter_Modify_State+0x4a>
		}
		else if (*Conv_User_State == SCAN){
    107e:	80 81       	ld	r24, Z
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	21 f4       	brne	.+8      	; 0x108c <Converter_Modify_State+0x36>
			Converter_Start_Auto(Scan_Data, Conv_User_State);
    1084:	ca 01       	movw	r24, r20
    1086:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Converter_Start_Auto>
    108a:	0a c0       	rjmp	.+20     	; 0x10a0 <Converter_Modify_State+0x4a>
		}
		else if (*Conv_User_State == AUTO){
    108c:	80 81       	ld	r24, Z
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	19 f4       	brne	.+6      	; 0x1098 <Converter_Modify_State+0x42>
			*Conv_User_State = ON;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 83       	st	Z, r24
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <Converter_Modify_State+0x4a>
		}
		else if (*Conv_User_State == ON){
    1098:	80 81       	ld	r24, Z
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <Converter_Modify_State+0x4a>
			*Conv_User_State = OFF;
    109e:	10 82       	st	Z, r1
		}
		*Button_Event = NO_BUTTON_PRESS;
    10a0:	18 82       	st	Y, r1
		break;
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <Converter_Modify_State+0x70>
		
		case BUTTON_PRESS_2: /* If event 1, increment duty cycle */
		if (OCR0B < (TIMER_0_TOP-1)) /*If OCR0B hasn't reached the top yet*/
    10a4:	28 b5       	in	r18, 0x28	; 40
    10a6:	23 36       	cpi	r18, 0x63	; 99
    10a8:	18 f4       	brcc	.+6      	; 0x10b0 <Converter_Modify_State+0x5a>
		{
			OCR0B += BUTTON_PRESS_INCREMENT;
    10aa:	28 b5       	in	r18, 0x28	; 40
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	28 bd       	out	0x28, r18	; 40
		}
		*Button_Event = NO_BUTTON_PRESS;
    10b0:	fc 01       	movw	r30, r24
    10b2:	10 82       	st	Z, r1
		break;
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <Converter_Modify_State+0x70>
		
		case BUTTON_PRESS_1: /* If event 2, decrement duty cycle */
		if (OCR0B) /* Si OCR0B non-zero */
    10b6:	28 b5       	in	r18, 0x28	; 40
    10b8:	22 23       	and	r18, r18
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <Converter_Modify_State+0x6c>
		{
			OCR0B -= BUTTON_PRESS_INCREMENT;
    10bc:	28 b5       	in	r18, 0x28	; 40
    10be:	21 50       	subi	r18, 0x01	; 1
    10c0:	28 bd       	out	0x28, r18	; 40
		}
		*Button_Event = NO_BUTTON_PRESS;
    10c2:	fc 01       	movw	r30, r24
    10c4:	10 82       	st	Z, r1
			/* Do nothing */
		break;
		
	}

}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <Battery_Set_Limits>:
	OCR0B = Scan_Data->PP_DutyCycle; /* On met le convertisseur où la puissance est la plus élevée*/
	Scan_Data->Scan_Post_Delay = POST_SCAN_DELAY;
	
}
		
void Battery_Set_Limits(uint8_t Battery_Type, volatile Battery_Data_t* Battery_Voltage_Limits){
    10cc:	fb 01       	movw	r30, r22
	
	if(Battery_Type == 3){ /*3S Lithium-Ion Mode*/
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	89 f4       	brne	.+34     	; 0x10f4 <Battery_Set_Limits+0x28>
		
			Battery_Voltage_Limits->Batt_OV_Cut_In = 12300; // mV. Voltage above which battery is in overvoltage (charging should stop)
    10d2:	8c e0       	ldi	r24, 0x0C	; 12
    10d4:	90 e3       	ldi	r25, 0x30	; 48
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
			Battery_Voltage_Limits->Batt_OV_Cut_Out = 12000; // mV. Voltage below which battery is out of overvoltage (charging can resume)
    10da:	80 ee       	ldi	r24, 0xE0	; 224
    10dc:	9e e2       	ldi	r25, 0x2E	; 46
    10de:	93 83       	std	Z+3, r25	; 0x03
    10e0:	82 83       	std	Z+2, r24	; 0x02
			Battery_Voltage_Limits->Batt_UV_Cut_In = 9000; // mV. Voltage below which battery is in undervoltage (discharge should stop)
    10e2:	88 e2       	ldi	r24, 0x28	; 40
    10e4:	93 e2       	ldi	r25, 0x23	; 35
    10e6:	95 83       	std	Z+5, r25	; 0x05
    10e8:	84 83       	std	Z+4, r24	; 0x04
			Battery_Voltage_Limits->Batt_UV_Cut_Out = 9450; // mV. Voltage above which battery is out of undervoltage (discharge can resume)
    10ea:	8a ee       	ldi	r24, 0xEA	; 234
    10ec:	94 e2       	ldi	r25, 0x24	; 36
    10ee:	97 83       	std	Z+7, r25	; 0x07
    10f0:	86 83       	std	Z+6, r24	; 0x06
    10f2:	08 95       	ret
			
	}
	
	else if (Battery_Type == 2){ /*2S Lithium-Ion Mode*/
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	89 f4       	brne	.+34     	; 0x111a <__stack+0x1b>
		
		Battery_Voltage_Limits->Batt_OV_Cut_In = 8000; // mV
    10f8:	80 e4       	ldi	r24, 0x40	; 64
    10fa:	9f e1       	ldi	r25, 0x1F	; 31
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
		Battery_Voltage_Limits->Batt_OV_Cut_Out = 7900; // mV
    1100:	8c ed       	ldi	r24, 0xDC	; 220
    1102:	9e e1       	ldi	r25, 0x1E	; 30
    1104:	93 83       	std	Z+3, r25	; 0x03
    1106:	82 83       	std	Z+2, r24	; 0x02
		Battery_Voltage_Limits->Batt_UV_Cut_In = 6000; // mV
    1108:	80 e7       	ldi	r24, 0x70	; 112
    110a:	97 e1       	ldi	r25, 0x17	; 23
    110c:	95 83       	std	Z+5, r25	; 0x05
    110e:	84 83       	std	Z+4, r24	; 0x04
		Battery_Voltage_Limits->Batt_UV_Cut_Out = 6300; // mV
    1110:	8c e9       	ldi	r24, 0x9C	; 156
    1112:	98 e1       	ldi	r25, 0x18	; 24
    1114:	97 83       	std	Z+7, r25	; 0x07
    1116:	86 83       	std	Z+6, r24	; 0x06
    1118:	08 95       	ret
		
	}
	
	else if (Battery_Type ==1){ /* 12V Lead-Acid Mode */
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	89 f4       	brne	.+34     	; 0x1140 <__stack+0x41>
		
		Battery_Voltage_Limits->Batt_OV_Cut_In = 13800; // mV
    111e:	88 ee       	ldi	r24, 0xE8	; 232
    1120:	95 e3       	ldi	r25, 0x35	; 53
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
		Battery_Voltage_Limits->Batt_OV_Cut_Out = 13500; // mV
    1126:	8c eb       	ldi	r24, 0xBC	; 188
    1128:	94 e3       	ldi	r25, 0x34	; 52
    112a:	93 83       	std	Z+3, r25	; 0x03
    112c:	82 83       	std	Z+2, r24	; 0x02
		Battery_Voltage_Limits->Batt_UV_Cut_In = 10800;	// mV
    112e:	80 e3       	ldi	r24, 0x30	; 48
    1130:	9a e2       	ldi	r25, 0x2A	; 42
    1132:	95 83       	std	Z+5, r25	; 0x05
    1134:	84 83       	std	Z+4, r24	; 0x04
		Battery_Voltage_Limits->Batt_UV_Cut_Out = 11000; // mV
    1136:	88 ef       	ldi	r24, 0xF8	; 248
    1138:	9a e2       	ldi	r25, 0x2A	; 42
    113a:	97 83       	std	Z+7, r25	; 0x07
    113c:	86 83       	std	Z+6, r24	; 0x06
    113e:	08 95       	ret
		
	}
	
	else {	/* 6V Lead-Acid Mode */
		
		Battery_Voltage_Limits->Batt_OV_Cut_In = 6900; // mV
    1140:	84 ef       	ldi	r24, 0xF4	; 244
    1142:	9a e1       	ldi	r25, 0x1A	; 26
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
		Battery_Voltage_Limits->Batt_OV_Cut_Out = 6800; // mV
    1148:	80 e9       	ldi	r24, 0x90	; 144
    114a:	9a e1       	ldi	r25, 0x1A	; 26
    114c:	93 83       	std	Z+3, r25	; 0x03
    114e:	82 83       	std	Z+2, r24	; 0x02
		Battery_Voltage_Limits->Batt_UV_Cut_In = 5400;	// mV
    1150:	88 e1       	ldi	r24, 0x18	; 24
    1152:	95 e1       	ldi	r25, 0x15	; 21
    1154:	95 83       	std	Z+5, r25	; 0x05
    1156:	84 83       	std	Z+4, r24	; 0x04
		Battery_Voltage_Limits->Batt_UV_Cut_Out = 5500; // mV
    1158:	8c e7       	ldi	r24, 0x7C	; 124
    115a:	95 e1       	ldi	r25, 0x15	; 21
    115c:	97 83       	std	Z+7, r25	; 0x07
    115e:	86 83       	std	Z+6, r24	; 0x06
    1160:	08 95       	ret

00001162 <__divmodsi4>:
    1162:	05 2e       	mov	r0, r21
    1164:	97 fb       	bst	r25, 7
    1166:	1e f4       	brtc	.+6      	; 0x116e <__divmodsi4+0xc>
    1168:	00 94       	com	r0
    116a:	0e 94 c8 08 	call	0x1190	; 0x1190 <__negsi2>
    116e:	57 fd       	sbrc	r21, 7
    1170:	07 d0       	rcall	.+14     	; 0x1180 <__divmodsi4_neg2>
    1172:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodsi4>
    1176:	07 fc       	sbrc	r0, 7
    1178:	03 d0       	rcall	.+6      	; 0x1180 <__divmodsi4_neg2>
    117a:	4e f4       	brtc	.+18     	; 0x118e <__divmodsi4_exit>
    117c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__negsi2>

00001180 <__divmodsi4_neg2>:
    1180:	50 95       	com	r21
    1182:	40 95       	com	r20
    1184:	30 95       	com	r19
    1186:	21 95       	neg	r18
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	4f 4f       	sbci	r20, 0xFF	; 255
    118c:	5f 4f       	sbci	r21, 0xFF	; 255

0000118e <__divmodsi4_exit>:
    118e:	08 95       	ret

00001190 <__negsi2>:
    1190:	90 95       	com	r25
    1192:	80 95       	com	r24
    1194:	70 95       	com	r23
    1196:	61 95       	neg	r22
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	08 95       	ret

000011a0 <__mulhisi3>:
    11a0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__umulhisi3>
    11a4:	33 23       	and	r19, r19
    11a6:	12 f4       	brpl	.+4      	; 0x11ac <__mulhisi3+0xc>
    11a8:	8a 1b       	sub	r24, r26
    11aa:	9b 0b       	sbc	r25, r27
    11ac:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__usmulhisi3_tail>

000011b0 <__umulhisi3>:
    11b0:	a2 9f       	mul	r26, r18
    11b2:	b0 01       	movw	r22, r0
    11b4:	b3 9f       	mul	r27, r19
    11b6:	c0 01       	movw	r24, r0
    11b8:	a3 9f       	mul	r26, r19
    11ba:	70 0d       	add	r23, r0
    11bc:	81 1d       	adc	r24, r1
    11be:	11 24       	eor	r1, r1
    11c0:	91 1d       	adc	r25, r1
    11c2:	b2 9f       	mul	r27, r18
    11c4:	70 0d       	add	r23, r0
    11c6:	81 1d       	adc	r24, r1
    11c8:	11 24       	eor	r1, r1
    11ca:	91 1d       	adc	r25, r1
    11cc:	08 95       	ret

000011ce <__usmulhisi3>:
    11ce:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__umulhisi3>

000011d2 <__usmulhisi3_tail>:
    11d2:	b7 ff       	sbrs	r27, 7
    11d4:	08 95       	ret
    11d6:	82 1b       	sub	r24, r18
    11d8:	93 0b       	sbc	r25, r19
    11da:	08 95       	ret

000011dc <__muluhisi3>:
    11dc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__umulhisi3>
    11e0:	a5 9f       	mul	r26, r21
    11e2:	90 0d       	add	r25, r0
    11e4:	b4 9f       	mul	r27, r20
    11e6:	90 0d       	add	r25, r0
    11e8:	a4 9f       	mul	r26, r20
    11ea:	80 0d       	add	r24, r0
    11ec:	91 1d       	adc	r25, r1
    11ee:	11 24       	eor	r1, r1
    11f0:	08 95       	ret

000011f2 <__udivmodsi4>:
    11f2:	a1 e2       	ldi	r26, 0x21	; 33
    11f4:	1a 2e       	mov	r1, r26
    11f6:	aa 1b       	sub	r26, r26
    11f8:	bb 1b       	sub	r27, r27
    11fa:	fd 01       	movw	r30, r26
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <__udivmodsi4_ep>

000011fe <__udivmodsi4_loop>:
    11fe:	aa 1f       	adc	r26, r26
    1200:	bb 1f       	adc	r27, r27
    1202:	ee 1f       	adc	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	a2 17       	cp	r26, r18
    1208:	b3 07       	cpc	r27, r19
    120a:	e4 07       	cpc	r30, r20
    120c:	f5 07       	cpc	r31, r21
    120e:	20 f0       	brcs	.+8      	; 0x1218 <__udivmodsi4_ep>
    1210:	a2 1b       	sub	r26, r18
    1212:	b3 0b       	sbc	r27, r19
    1214:	e4 0b       	sbc	r30, r20
    1216:	f5 0b       	sbc	r31, r21

00001218 <__udivmodsi4_ep>:
    1218:	66 1f       	adc	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	1a 94       	dec	r1
    1222:	69 f7       	brne	.-38     	; 0x11fe <__udivmodsi4_loop>
    1224:	60 95       	com	r22
    1226:	70 95       	com	r23
    1228:	80 95       	com	r24
    122a:	90 95       	com	r25
    122c:	9b 01       	movw	r18, r22
    122e:	ac 01       	movw	r20, r24
    1230:	bd 01       	movw	r22, r26
    1232:	cf 01       	movw	r24, r30
    1234:	08 95       	ret

00001236 <__itoa_ncheck>:
    1236:	bb 27       	eor	r27, r27
    1238:	4a 30       	cpi	r20, 0x0A	; 10
    123a:	31 f4       	brne	.+12     	; 0x1248 <__itoa_ncheck+0x12>
    123c:	99 23       	and	r25, r25
    123e:	22 f4       	brpl	.+8      	; 0x1248 <__itoa_ncheck+0x12>
    1240:	bd e2       	ldi	r27, 0x2D	; 45
    1242:	90 95       	com	r25
    1244:	81 95       	neg	r24
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	0c 94 27 09 	jmp	0x124e	; 0x124e <__utoa_common>

0000124c <__utoa_ncheck>:
    124c:	bb 27       	eor	r27, r27

0000124e <__utoa_common>:
    124e:	fb 01       	movw	r30, r22
    1250:	55 27       	eor	r21, r21
    1252:	aa 27       	eor	r26, r26
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	aa 1f       	adc	r26, r26
    125a:	a4 17       	cp	r26, r20
    125c:	10 f0       	brcs	.+4      	; 0x1262 <__utoa_common+0x14>
    125e:	a4 1b       	sub	r26, r20
    1260:	83 95       	inc	r24
    1262:	50 51       	subi	r21, 0x10	; 16
    1264:	b9 f7       	brne	.-18     	; 0x1254 <__utoa_common+0x6>
    1266:	a0 5d       	subi	r26, 0xD0	; 208
    1268:	aa 33       	cpi	r26, 0x3A	; 58
    126a:	08 f0       	brcs	.+2      	; 0x126e <__utoa_common+0x20>
    126c:	a9 5d       	subi	r26, 0xD9	; 217
    126e:	a1 93       	st	Z+, r26
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	79 f7       	brne	.-34     	; 0x1252 <__utoa_common+0x4>
    1274:	b1 11       	cpse	r27, r1
    1276:	b1 93       	st	Z+, r27
    1278:	11 92       	st	Z+, r1
    127a:	cb 01       	movw	r24, r22
    127c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <strrev>

00001280 <strrev>:
    1280:	dc 01       	movw	r26, r24
    1282:	fc 01       	movw	r30, r24
    1284:	67 2f       	mov	r22, r23
    1286:	71 91       	ld	r23, Z+
    1288:	77 23       	and	r23, r23
    128a:	e1 f7       	brne	.-8      	; 0x1284 <strrev+0x4>
    128c:	32 97       	sbiw	r30, 0x02	; 2
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <strrev+0x18>
    1290:	7c 91       	ld	r23, X
    1292:	6d 93       	st	X+, r22
    1294:	70 83       	st	Z, r23
    1296:	62 91       	ld	r22, -Z
    1298:	ae 17       	cp	r26, r30
    129a:	bf 07       	cpc	r27, r31
    129c:	c8 f3       	brcs	.-14     	; 0x1290 <strrev+0x10>
    129e:	08 95       	ret

000012a0 <eeprom_read_word>:
    12a0:	a8 e1       	ldi	r26, 0x18	; 24
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	42 e0       	ldi	r20, 0x02	; 2
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <eeprom_read_blraw>

000012ac <eeprom_write_word>:
    12ac:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <eeprom_write_byte>
    12b0:	27 2f       	mov	r18, r23
    12b2:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <eeprom_write_r18>

000012b6 <eeprom_read_block>:
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22

000012ba <eeprom_read_blraw>:
    12ba:	fc 01       	movw	r30, r24
    12bc:	f9 99       	sbic	0x1f, 1	; 31
    12be:	fe cf       	rjmp	.-4      	; 0x12bc <eeprom_read_blraw+0x2>
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <eeprom_read_blraw+0x14>
    12c2:	f2 bd       	out	0x22, r31	; 34
    12c4:	e1 bd       	out	0x21, r30	; 33
    12c6:	f8 9a       	sbi	0x1f, 0	; 31
    12c8:	31 96       	adiw	r30, 0x01	; 1
    12ca:	00 b4       	in	r0, 0x20	; 32
    12cc:	0d 92       	st	X+, r0
    12ce:	41 50       	subi	r20, 0x01	; 1
    12d0:	50 40       	sbci	r21, 0x00	; 0
    12d2:	b8 f7       	brcc	.-18     	; 0x12c2 <eeprom_read_blraw+0x8>
    12d4:	08 95       	ret

000012d6 <eeprom_write_byte>:
    12d6:	26 2f       	mov	r18, r22

000012d8 <eeprom_write_r18>:
    12d8:	f9 99       	sbic	0x1f, 1	; 31
    12da:	fe cf       	rjmp	.-4      	; 0x12d8 <eeprom_write_r18>
    12dc:	1f ba       	out	0x1f, r1	; 31
    12de:	92 bd       	out	0x22, r25	; 34
    12e0:	81 bd       	out	0x21, r24	; 33
    12e2:	20 bd       	out	0x20, r18	; 32
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	fa 9a       	sbi	0x1f, 2	; 31
    12ea:	f9 9a       	sbi	0x1f, 1	; 31
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	08 95       	ret

000012f2 <_exit>:
    12f2:	f8 94       	cli

000012f4 <__stop_program>:
    12f4:	ff cf       	rjmp	.-2      	; 0x12f4 <__stop_program>
